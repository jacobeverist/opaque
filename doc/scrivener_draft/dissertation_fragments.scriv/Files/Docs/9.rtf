{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
\deftab720
\pard\pardeftab720\fi720

\f0\fs28 \cf0 \
The purpose of the divergence computation is to detect the concrete event of the target curve diverging from the host curve.  This is used to classify whether or not a junction has been detected or whether the host path is simply being extended.\
\
The difficulty associated with this task is that there is no discrete event to determine a divergence.  It is measured by passing a threshold that must be calibrated to the task.  The thresholds are both sensitive to cartesian distance and angular difference between the diverging curve and the divergence point on the host curve.\
\
We first begin by computing the closest point distance between the target curve points and the host curve.  At the point which the closest point distances begin monotonically increasing until the curve runs out, we start our search for the branch point.  That is, we select the minimum distance inflection point before distance increases monotonically.\
\
From this point, we walk.\
\
\
\
\
We have defined 2 different types of divergence.  The simple divergence and the angle-biased divergence.\
\
The simple divergence is computed based on the closest point distance between the host curve and the target curve.\
\
\
getDeparturePoint():\
\
- receive as input the global path and the local spline of a pose\
}