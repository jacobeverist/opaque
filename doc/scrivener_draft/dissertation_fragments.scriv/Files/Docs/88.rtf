{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
In order to move through the environment, the robot needs to have a solution for motion planning and collision-reaction.  In an exteroceptive approach, we would detect and avoid obstacles at a distance.  If collisions were made, touch sensors could detect them and we could react appropriately.  With only proprioceptive sensors, indirect methods are needed for reacting to obstacles.  A series of motion methods are used to solve these problems including compliant locomotion, compliant path-following, safe-anchoring, stability assurance, slip detection, and dead-end detection.\
\
While moving through the environment, the snake robot needs some means of measuring the distance traveled.  Wheeled robots usually have some form of shaft encoder to measure rotations of the wheels to estimate distance traveled.  In addition, range or vision sensors are capable of tracking changes in the environment to estimate position of the robot.   GPS is not feasible because of its unreliable operation in underground environments.  Our proprioceptive approach achieves motion estimation by anchoring multiple points of the body with the environment and kinematically tracking the change in distance as the snake contracts and extends.   This gives us a rudimentary motion estimation method whose effectiveness we measure in a series of experiments.\
\
\
\
Some method is needed to sense the environment.  In an exteroceptive approach, vision and range sensors would give us a wealth of information about the obstacles in the environment at great distances.  Touch sensors would give us a binary status of contact with an obstacle or not.  With only proprioceptive joint sensors, our approach is to kinematically compute the occupancy of the robot's body in the environment and record the presence of free space over time.  Using this information, we can indirectly infer obstacles on the boundary of free space.  We show our approach and the sensing results for a variety of environmental configurations.\
\
\
We address the following challenges: 1) How does the robot move and locomote in a confined environment without exteroception?  2) How is the distance traveled by a snake robot measured with no odometry and no exteroception?  3) How does the robot sense the environment with only proprioception?  4)  How is the map built with the information available?  5) How is the map corrected for visiting the same location twice, i.e. loop-closing?  6)  How does the robot navigate and explore with the constructed map?\
\
\
Once we have constructed the map, the next step is to use the map for exploration and navigation purposes.  In the exteroceptive case, navigating with the map is a localization problem, comparing the sensed environment with the mapped one.  This is also the approach in the proprioceptive case.  However, the localization accuracy along the length of a followed path is more uncertain, so our path-following algorithms are necessarily more robust to this eventuality.   In the exteroceptive case, the act of exploration can be achieved by navigating to the boundaries of the map with no obstacles.  In the proprioceptive case, exploration is achieved by following every tunnel or path until a dead-end is detected.  We show some environments that we successfully map and navigate, as well as some environments that require future work. \
\
For a complete mapping system, we need to solve the following components: 1) locomotion, 2) sensing, 3) motion estimation, 4) map representation, 5) map correction technique, 6) navigation and exploration policy.  Locomotion is the weakest point since it is a simulation and assumptions are made about the environment.\
\
We present several example environments, and we demonstrate the robot's mapping and navigation results using our framework.   Our metric for success for determining the quality of a map is measured by selecting a random location on the map and judging how well the robot reliably navigates to that location in the world.\
}