{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
## Sensing Behavior\
\
In order to capture as much information about the environment as we can, we need to sweep the robot's body around as much as possible while trying to cover as much space as possible without losing our reference pose to the global frame.  Therefore, we have devised a behavior assemblage that separates responsibility for anchoring on one half of the snake and for probing the environment with the other.  This assemblage is shown in [](#pokewalls1).  The resulting behavior is shown in [](#pokeBehavior).\
\
The resultant behavior sweeps the front end of the snake back and forth, impacting both sides of the pipe.  The front is gradually extended to increase the probe reach down the pipe.  Once the extension has reached the maximum, the behavior is terminated after returning the snake back to its original fully anchored Rest-State posture.\
\
At regular intervals during the sweeping behavior at the end of each Transition termination, the posture is recorded for later processing.  The end result is an ordered list of posture vectors representing each snapshot of the robot during the behavior.  These postures are then processed into a map.\
\
We describe each behavior in the assemblage.\
\
![PokeWalls behavior assembly.][pokewalls1]\
\
[pokewalls1]: {\field{\*\fldinst{HYPERLINK "scrivlnk://153"}}{\fldrslt 4_pokewalls_1.png}} width=400px\
\
<!--\
%GRAPHIC\
%Merge(\
%PokeWalls <- Curl <- Transition\
%HoldPosition\
%)\
-->\
\
\
**Curl:** The sweeping behavior is performed by setting a series of consecutive joints all to a 30 degree angle, resulting in a curling motion.  In a confined environment, the result of the commanded joints usually results in the snake impacting the walls of the environment.  By steadily increasing the number of joints to perform this sweeping motion, the reach of the snake is gradually increased and more space is sweeped out.\
\
The Curl sub-behavior is responsible for commanding these joint angles given the specified joint range by the parent.  It is also responsible for executing a simple contact detection heuristic in the course of the curling behavior.  We describe both here.  \
\
Given the top joint \\\\(j_t\\\\) specified by the parent, the Curl behavior gives commands to the joints \\\\((j_0 ... j_t)\\\\), setting \\\\(\\alpha_i = 0\\\\).  All \\\\(\\alpha\\\\) are set to the following sequence of angles: \\\\((0, 25, 30, 0, -25, -30, 0)\\\\).  Between each movement command we use the Transition sub-behavior to manage the motion as a linear interpolation between postures.  We also wait for the tip of the snake's position to become stable for executing another movement transition.  At the end of the movement sequence and once the tip has become stable, the Curl behavior then terminates and waits to be reset by the parent. \
\
For the contact detection heuristic, once the joints have been set to \\\\(\\alpha = 25\\\\), the tip of the snake's position \\\\(p_a\\\\) is computed kinematically.  The joints are then set to \\\\(\\alpha = 30\\\\) and the tip's position \\\\(p_b\\\\) is again computed kinematically.  The Cartesian distance between \\\\(p_a\\\\) and \\\\(p_b\\\\) is computed.  If the value is negligible, we assume that the tip of the snake has made contact with the walls.  Otherwise, we do not assume contact has bee made.  The repeat this for the negative angle commands on the other side of the pipe.  \
\
The way the sweeping behavior is performed is by setting the commanded position of all the joints from the tip of the snake down to a top joint simultaneously from 0 to 30 degrees.  This results in a "curling" behavior which gives the subbehavior its name.  The joints are set at angles of 0, 25, 30, 0, -25, -30, 0.\
\
<!--\
%- Curl sub-behavior\
%- set all joints to -30, -25, 0, 25, 30\
%- from top joint to tip\
%- skip back to 0 from terminator\
%- check difference between |30| and |25| to see if contact is made\
-->\
\
**PokeWalls:** The PokeWalls behavior is responsible for specifying the range of joints that perform the Curl operation, instantiating and configuring the Curl behavior.  The PokeWalls behavior is configured with the sweeping direction on the snake, starts the Curl behavior with the joint range specified by \\\\(j_t = 6\\\\).  It then passes through the outputs of the Curl behavior.\
\
At the termination of the Curl behavior, PokeWalls increments \\\\(j_t\\\\) by 2 and restarts the Curl behavior with the new parameters.  If \\\\(j_t = 10\\\\), we then begin decrementing \\\\(j_t\\\\) by 2 until we go back to \\\\(j_t = 6\\\\).  Once the Curl has been executed for the second for \\\\(j_t = 6\\\\), we terminate the PokeWalls behavior.\
\
The PokeWalls behavior is also responsible for setting the maximum torque for each of the curling joints to be compliant.  This ensures that the posture of the snake complies to the environment and gives us as much information as possible about the structure of the free space.  If we do not have compliant joints, the curling behavior can result in disruption of the anchors and loss of our reference poses.\
\
<!--\
%is to specify which joints participate in the sweeping behavior and spawns the Curl sub-behavior.\
%- receives direction\
%- sets the top joint from 6 to 10 on Curl\
%- walks it through Curl steps, resets and does topJoint\
%- sets compliant torque from 0 to topJoint\
%- sets top joint from 6 to 10 to 6 and then terminates\
-->\
\
**Transition:**   This is the same behavior as described in Chapter 2.  It takes an initial and final posture and outputs a series of postures that provides a smooth transition between the two using interpolation.  Its parent behavior is Curl which instantiates it and resets it whenever it needs to perform a new move.\
\
**HoldPosition:** This is the same behavior as described in Chapter 2.  It is initialized with the complete posture of the snake at the beginning of the behavior.  This posture is usually the result of the Rest-State stage of the Adaptive Step locomotion process.  It continually outputs the anchored posture.  Its output is subsumed by the output from the PokeWalls behavior in a precedence merge.  It is 2nd in the behavior ordering as shown in [](#pokewalls1). \
\
\
\
\
}