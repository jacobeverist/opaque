{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
\
###Medial Axis\
\
Although polygons that represent the sweeped free space are useful, we need something that is more compact that also filters out the smoothing effects of blind spots and sharp features.  That is, we want an approach where the negative effects of missing data, erroneous data, and loss of salient features are minimized.\
\
For this purpose, we compute the medial axis, also sometimes known as thinning or skeletonization [cite].  This concept takes a shape and reduces it to a path or series of edges that follow the "spine" of a shape.  Approaches range from a strict computational geometry approach such as the Voronoi diagram to image processing approaches of image thinning and skeletonization that erode a pixelized shape until the skeleton is all that remains [cite].\
\
<!--\
%Skeletonization of a binary image.\
%Black values (0) mean object and white values (1 = 255) background.\
%Source: Parker, J.R. Algorithms for image processing and computer vision.\
%				New York, NY: John Wiley & Sons, 1997. 417p. pp. 203-218.\
%\
%Program adapted to C/OpenCV by Jose Iguelmar Miranda.\
%March, 2010.\
%I have also a Java version of this program.\
-->\
\
![Process of generating medial axis.][medial1]\
\
[medial1]: {\field{\*\fldinst{HYPERLINK "scrivlnk://160"}}{\fldrslt 4_medial_process.png}} width=400px\
\
![Process of generating medial axis.][medial2]\
\
[medial2]: {\field{\*\fldinst{HYPERLINK "scrivlnk://161"}}{\fldrslt 4_medial_process2.png}} width=400px\
\
We are interested in extracting the medial axis of the alpha hull generated from our free space map.  Since the alpha hull smooths the boundaries of the free space map, generating a medial axis will give us a topological representation of the free space that is resistant to boundary features.  Given the free space map in [](#medial1)a, and its corresponding alpha hull in [](#medial1)b, the alpha hull's conversion back to an image in [](#medial1)c, and its resultant medial axis shown in [](#medial1)d.  We use the skeletonization algorithm from [ParkerJR] \\footnote\{C/OpenCV code written by Jose Iguelmar Miranda, 2010\}.\
\
sWe can see that the medial axis roughly corresponds to the topological representation of the pipe environment.  However, it is crooked, pixelated, and does not extend the full length of the data set.  We further treat this data to give a more useful representatation.\
\
Starting with the result from [](#medial1)d shown in [](#medial2)a, we create a minimum spanning tree (MST) graph where each node is a pixel from the medial axis and an edge is added between two nodes if their corresponding pixels are neighbors, shown in [](#medial2)b.\
\
This MST has many leafs due to the artifacts of pixelation.  We can simply prune the whole tree by sorting all nodes by degree, and removing the nodes with 1 degree and their corresponding edges.  In most cases, this will leave us with a single ordered path of nodes with no branches.  In some cases, we will have a branch if the original free space map shows evidence of a junction.\
\
In the case of a single path, our next step is to extend this path to full extent of the original shape.  We begin by fitting a B-Spline curve to the ordered path.  With an appropriate smoothing parameter, the spline curve will follow the path of the ordered points but will ignore the jagged edges from pixelation.  We then uniformly sample points along this curve to convert it back to an ordered set of points.  We extend this path in the front and back by extrapolating more points along the direction specified by the curve tip, as in [](#medial2)c.  Multiple tangent vectors are sampled along the tip neighborhood and their direction is averaged to get a direction that is immune to spline curving artifacts at the terminals.  Finally, the series of points is cut off once the extrapolated points cross the alpha hull boundary, shown in [](#medial2)d.\
\
In the case that we have a branch, we perform this series of operations for the path between each combination of pairs of terminals.  For each medial axis of a free space map, there are \\\\(n = 2 + B\\\\) end points where \\\\(B\\\\) is the number of branches.  The number of unique paths of a medial axis is found by \\\\(\{n \\choose 2\}\\\\) since we are using the MST and there is a unique path between each pair of points.\
\
The final form is a compact representation of the topology of the local free space that removes the noise and uncertainty of the boundary and allows us to only represent the area we can move through.  This has a number of uses for our map-making that we describe in the next chapter.  \
\
<!--\
% environment -> free space map -> alpha hull -> image of alpha hull interior -> medial axis -> graph -> MST -> Spline -> sampled points -> extrapolation -> cutoff at boundary -> overlap of environment \
-->}