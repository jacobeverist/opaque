{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs24 \cf0 To compute the raw medial axis of a path, we must take the union of the set of its constituent poses.  For every pose, we take the set of points that constitute the polygon representing the pose's alpha shape in the local coordinate frame.  For every point set B of every pose P, we transform the set B to B' in the global frame.  The union of all sets B' is the resultant point set C.\
\
We then compute the alpha shape of C with a radius of [0.2].   The resultant alpha shape is mapped onto an image of appropriate dimensions with a pixel size of [0.05].  All of the pixels contained within the grid framed alpha shape are set to 1 and all others are set to zero.  The resultant image is input to the computeMedialAxis function.\
\
The medial axis result will look similar to Figure [X] with overlap into the parent path and possibly multiple branches because the robot overlaps the junction in different ways for each pose.  We cannot use the medial axis in this form because it does not logically correspond to the data representation we are looking for.  Union path tree of all the paths overlap each other in multiple ways.  Our goal is to extract the path fragment that extrudes from its parent path at the designated branching point.  Using only this section, this is our representation of the child path.\
\
Identifying the junction requires some finesse.  Given the divergence point on the branching pose, find the closest point on the union path tree to the local divergence point.   This becomes our theoretical branching point.   We create a branching leaf along the desired direction if the union path tree is too curvy or does not represent the sharp junction structure that we desire to represent.  The comparison of the theoretical leaf and the generated path is shown in Figure [X].\
\
We then call the trimPath() function which will prune the tree at the branching point, keep the section of the path tree that overlaps the our desired section of environment, and ensures that the result is a single path and not a tree, pruning off any extraneous leaves.\
\
The first thing we do is find the longest path between a pair of leaf terminals on the path tree such that the longest path passes through the branch point at the target angle.}