import random
random.seed(0)
import sys
from SnakeControl import SnakeControl
from copy import *
from math import *
import time
from subprocess import Popen, PIPE

from behaviors.AnchorTransition import AnchorTransition

from pose.AverageContacts import AverageContacts
from maps.PoseGraph import PoseGraph
from maps.LocalNode import LocalNode
from maps.Pose import Pose
from maps.SplineFit import SplineFit

from maps.functions import *
import hashlib

import scipy
import pca_module
#from maps import toro

from maps import scsgp

import alphamod


def computeBareHull(node1, sweep = False, static = False):
	
	if static:
		node1.computeStaticAlphaBoundary()

		a_data = node1.getAlphaBoundary(static=True)
		a_data = decimatePoints(a_data)

		" convert hull points to GPAC coordinates before adding covariances "
		localGPACPose = node1.getLocalGPACPose()
		localGPACProfile = Pose(localGPACPose)
		
		a_data_GPAC = []
		for pnt in a_data:
			a_data_GPAC.append(localGPACProfile.convertGlobalToLocal(pnt))
		
	else:
				
		" Read in data of Alpha-Shapes without their associated covariances "
		node1.computeAlphaBoundary(sweep = sweep)
		a_data = node1.getAlphaBoundary(sweep = sweep)
		a_data = decimatePoints(a_data)
		
		" convert hull points to GPAC coordinates "
		localGPACPose = node1.getLocalGPACPose()
		localGPACProfile = Pose(localGPACPose)
		
		a_data_GPAC = []
		for pnt in a_data:
			a_data_GPAC.append(localGPACProfile.convertGlobalToLocal(pnt))
	
	return a_data_GPAC

def computeHullAxis(nodeID, node2, tailCutOff = False):

	medial2 = node2.getBestMedialAxis()

	if tailCutOff:
		medial2 = node2.medialTailCuts[0]
	else:
		medial2 = node2.medialLongPaths[0]


	if node2.isBowtie:			
		hull2 = computeBareHull(node2, sweep = False, static = True)
		hull2.append(hull2[0])

	else:
		hull2 = computeBareHull(node2, sweep = False)
		hull2.append(hull2[0])
	
	
	return hull2, medial2

class TestUnit(SnakeControl):

	# 3 Steps, go right path, go left path, go back to origin
	# compute path at each step

	def __init__(self, probe, drawThings):
		SnakeControl.__init__(self)
	
		self.drawThings = drawThings
		self.probe = probe
		
		robotParam = {}
		robotParam['numJoints'] = self.probe.numSegs-1
		robotParam['numSegs'] = self.probe.numSegs
		robotParam['segLength'] = self.probe.segLength
		robotParam['segWidth'] = self.probe.segWidth
		robotParam['maxTorque'] = self.probe.maxTorque
		
		self.numJoints = robotParam['numJoints']
		
		self.robotParam = self.probe.robotParam
		
		self.setTimerAliasing(1)
		
		self.direction = True
		
		" get the probe state "
		probeState = self.probe.getProbeState()
		torques = probeState['torques']

		self.torques = [torques[i] for i in range(self.numJoints)]
			
		self.localState = 0
		self.globalState = 0
		self.prevTime = 0
		
		self.stepDist = 0.14
		
		# error tracking for path-following
		self.lastDist = 1e100
		self.distCount = 0
		self.targetReached = False
		
		self.isAnchored = False

		self.postureCounter = 0

		self.isCapture = False
		self.renderTransition = False
		
		self.isInitialized = False

		self.globalTimer = 1
		
	def frameStarted(self):

		self.probe.setAnchor(self.isAnchored)

		# alias the control sequence by some time step
		SnakeControl.frameStarted(self)
		if not self.isStep():
			return

		" get the probe state "
		probeState = self.probe.getProbeState()

		if self.globalState == 0 and self.globalTimer > 2:
			
			" anchor the robot initially "

			isDone = self.doInitAnchor()

			if isDone:
				pass
				self.globalState = 1
								
		elif self.globalState == 1:
			
			" create the motion model object "
			self.contacts = AverageContacts(self.probe)
			
			self.globalState = 2
			
		elif self.globalState == 2:

			" get stable reference nodes on the snake body "
			self.contacts.setMask( [1.0 for i in range(self.numJoints)] )	
			self.contacts.step(probeState)
			
			if self.contacts.isStable():
				self.globalState = 3
				self.lastPose = self.contacts.getAveragePose(0)

		elif self.globalState == 3:
		
		
			#self.testPoly()
			#self.testGauss()
			#self.testMedialHull()
			#self.testSpline()
			
			#self.testToro2()
			#self.testPCA()
			#self.testSCSGP()

			#self.testAlpha()
			self.testAlpha2()

			exit()

	def doInitAnchor(self):
		
		" get the probe state "
		probeState = self.probe.getProbeState()

		" create the first behavior "
		if self.localState == 0:
			
			print "START:  doInitAnchor()"
			
			self.behavior = AnchorTransition(self.robotParam)
			
			self.localState = 1

		" immediately begin running behavior "
		if self.localState == 1:
			
			isDone = self.behavior.step(probeState)
			joints1 = self.behavior.getJoints()
			
			self.mergeJoints([joints1])
			
			if isDone:
				self.localState = 0
				self.behavior = 0
				
				self.isAnchored = True
				
				print "FINISH:  doInitAnchor()"
				return True
		
		return False


	def testPoly(self):


		axis1 = [[-2.5732452528960197, -0.47054087548266971], [-2.3000000000000003, -0.42499999999999999], [-2.2750000000000004, -0.40000000000000002], [-2.25, -0.40000000000000002], [-2.2250000000000001, -0.40000000000000002], [-2.2000000000000002, -0.40000000000000002], [-2.1750000000000003, -0.40000000000000002], [-2.1500000000000004, -0.40000000000000002], [-2.125, -0.40000000000000002], [-2.1000000000000001, -0.375], [-2.0750000000000002, -0.375], [-2.0500000000000003, -0.375], [-2.0250000000000004, -0.34999999999999998], [-2.0, -0.34999999999999998], [-1.9750000000000001, -0.34999999999999998], [-1.9500000000000002, -0.34999999999999998], [-1.9250000000000003, -0.34999999999999998], [-1.9000000000000001, -0.34999999999999998], [-1.8750000000000002, -0.34999999999999998], [-1.8500000000000001, -0.32500000000000001], [-1.8250000000000002, -0.32500000000000001], [-1.8000000000000003, -0.32500000000000001], [-1.7750000000000001, -0.32500000000000001], [-1.7500000000000002, -0.29999999999999999], [-1.7250000000000001, -0.29999999999999999], [-1.7000000000000002, -0.27500000000000002], [-1.6750000000000003, -0.27500000000000002], [-1.6500000000000001, -0.27500000000000002], [-1.6250000000000002, -0.27500000000000002], [-1.6000000000000001, -0.27500000000000002], [-1.5750000000000002, -0.27500000000000002], [-1.5500000000000003, -0.27500000000000002], [-1.5250000000000001, -0.27500000000000002], [-1.5000000000000002, -0.27500000000000002], [-1.4750000000000001, -0.25], [-1.4500000000000002, -0.25], [-1.4250000000000003, -0.25], [-1.4000000000000001, -0.22500000000000001], [-1.3750000000000002, -0.22500000000000001], [-1.3500000000000001, -0.22500000000000001], [-1.3250000000000002, -0.22500000000000001], [-1.3000000000000003, -0.20000000000000001], [-1.2750000000000001, -0.20000000000000001], [-1.2500000000000002, -0.20000000000000001], [-1.2250000000000001, -0.20000000000000001], [-1.2000000000000002, -0.20000000000000001], [-1.1750000000000003, -0.20000000000000001], [-1.1500000000000001, -0.20000000000000001], [-1.1250000000000002, -0.17500000000000002], [-1.1000000000000001, -0.17500000000000002], [-1.0750000000000002, -0.17500000000000002], [-1.05, -0.15000000000000002], [-1.0250000000000001, -0.15000000000000002], [-1.0000000000000002, -0.15000000000000002], [-0.97499999999999998, -0.15000000000000002], [-0.95000000000000007, -0.15000000000000002], [-0.92500000000000004, -0.15000000000000002], [-0.90000000000000002, -0.12500000000000003], [-0.875, -0.12500000000000003], [-0.84999999999999998, -0.12500000000000003], [-0.82500000000000007, -0.12500000000000003], [-0.80000000000000004, -0.12500000000000003], [-0.77500000000000002, -0.10000000000000001], [-0.75, -0.10000000000000001], [-0.72499999999999998, -0.10000000000000001], [-0.70000000000000007, -0.10000000000000001], [-0.67500000000000004, -0.10000000000000001], [-0.65000000000000002, -0.10000000000000001], [-0.625, -0.075000000000000011], [-0.59999999999999998, -0.075000000000000011], [-0.57500000000000007, -0.075000000000000011], [-0.55000000000000004, -0.075000000000000011], [-0.52500000000000002, -0.05000000000000001], [-0.5, -0.05000000000000001], [-0.47499999999999998, -0.025000000000000001], [-0.45000000000000001, -0.025000000000000001], [-0.42499999999999999, -0.025000000000000001], [-0.40000000000000002, -0.025000000000000001], [-0.375, -0.025000000000000001], [-0.34999999999999998, 0.0], [-0.32500000000000001, 0.0], [-0.29999999999999999, 0.0], [-0.27500000000000002, 0.0], [-0.25, 0.0], [-0.22500000000000001, 0.0], [-0.20000000000000001, 0.025000000000000001], [-0.17500000000000002, 0.025000000000000001], [-0.15000000000000002, 0.025000000000000001], [-0.12500000000000003, 0.050000000000000003], [-0.10000000000000001, 0.050000000000000003], [-0.075000000000000011, 0.050000000000000003], [-0.05000000000000001, 0.050000000000000003], [-0.025000000000000001, 0.050000000000000003], [0.0, 0.050000000000000003], [0.025000000000000001, 0.050000000000000003], [0.050000000000000003, 0.050000000000000003], [0.075000000000000011, 0.050000000000000003], [0.10000000000000001, 0.050000000000000003], [0.125, 0.050000000000000003], [0.14999999999999999, 0.050000000000000003], [0.17500000000000002, 0.050000000000000003], [0.20000000000000001, 0.050000000000000003], [0.22500000000000001, 0.050000000000000003], [0.25, 0.050000000000000003], [0.27500000000000002, 0.050000000000000003], [0.30000000000000004, 0.050000000000000003], [0.32500000000000007, 0.050000000000000003], [0.35000000000000003, 0.050000000000000003], [0.37500000000000006, 0.025000000000000001], [0.40000000000000002, 0.025000000000000001], [0.42500000000000004, 0.0], [0.45000000000000007, -0.025000000000000001], [0.47500000000000003, -0.025000000000000001], [0.5, -0.05000000000000001], [0.52500000000000002, -0.05000000000000001], [0.55000000000000004, -0.075000000000000011], [0.57500000000000007, -0.10000000000000001], [0.60000000000000009, -0.10000000000000001], [0.62500000000000011, -0.12500000000000003], [0.65000000000000002, -0.15000000000000002], [0.67500000000000004, -0.15000000000000002], [0.70000000000000007, -0.17500000000000002], [0.72500000000000009, -0.20000000000000001], [0.75000000000000011, -0.22500000000000001], [0.77500000000000002, -0.25], [0.80000000000000004, -0.27500000000000002], [0.82500000000000007, -0.29999999999999999], [0.85000000000000009, -0.32500000000000001], [0.87500000000000011, -0.32500000000000001], [0.90000000000000002, -0.34999999999999998], [0.92500000000000004, -0.375], [0.95000000000000007, -0.40000000000000002], [0.97500000000000009, -0.42499999999999999], [1.0, -0.45000000000000001], [1.0, -0.47499999999999998], [1.0249999999999999, -0.5], [1.05, -0.52500000000000002], [1.075, -0.55000000000000004], [1.0999999999999999, -0.57500000000000007], [1.125, -0.59999999999999998], [1.1499999999999999, -0.625], [1.175, -0.65000000000000002], [1.2, -0.67500000000000004], [1.2250000000000001, -0.70000000000000007], [1.25, -0.72499999999999998], [1.2749999999999999, -0.75], [1.3, -0.77500000000000002], [1.3, -0.80000000000000004], [1.325, -0.82500000000000007], [1.3500000000000001, -0.84999999999999998], [1.375, -0.875], [1.3999999999999999, -0.90000000000000002], [1.425, -0.92500000000000004], [1.425, -0.95000000000000007], [1.45, -0.97499999999999998], [1.45, -1.0000000000000002], [1.45, -1.0250000000000001], [1.45, -1.05], [1.4750000000000001, -1.0750000000000002], [1.4750000000000001, -1.1000000000000001], [1.5888356171057145, -1.3026712342114291]]

		polyfit1_md5_nom = 309022452232519046662752646696093706844
		polyfit2_md5_nom = 309022452232519046662752646696093706844

		xP = []
		yP = []
		for p in axis1:
			xP.append(p[0])
			yP.append(p[1])
		
		(ar1,br1)= scipy.polyfit(xP,yP,1)


		m = hashlib.md5()
		m.update(repr((ar1,br1)))
		polyfit1_md5 = int(m.digest().encode('hex'),16)
		
		xP = []
		yP = []
		for p in axis1:
			xP.append(p[0])
			yP.append(p[1])
		
		(ar1,br1)= scipy.polyfit(xP,yP,1)

		m = hashlib.md5()
		m.update(repr((ar1,br1)))
		polyfit2_md5 = int(m.digest().encode('hex'),16)
		
		if polyfit1_md5_nom == polyfit1_md5:
			print "polyfit1 PASS"
		else:
			print "polyfit1 FAIL"
			
		if polyfit2_md5_nom == polyfit2_md5:
			print "polyfit2 PASS"
		else:
			print "polyfit2 FAIL"		

	def testGauss(self):
		
		foo = []
		
		foo.append(random.gauss(0.0,0.0001))

		m = hashlib.md5()
		m.update(repr(foo))
		rand_md5 = int(m.digest().encode('hex'),16)

		rand_md5_nom = 287040259466010197236266034435345065463
		if rand_md5_nom == rand_md5:
			print "rand1 PASS"
		else:
			print "rand1 FAIL"
				

	def testMedialHull(self):
		random.seed(0)

		PIXELSIZE = 0.05

		currNode = LocalNode(self.probe, self.contacts, 10, 19, PIXELSIZE)
		currNode.readFromFile2("result_2012_08_27", 10)			
		hull1, axis1 = computeHullAxis(10, currNode)

		currNode = LocalNode(self.probe, self.contacts, 10, 19, PIXELSIZE)
		currNode.readFromFile2("result_2012_08_27", 10)			
		hull2, axis2 = computeHullAxis(10, currNode)

		hull1_md5_nom = 235711552505359876739222943177420098447
		hull2_md5_nom = 153873940548353262496568220315837306136
		axis1_md5_nom = 218829303125138152013279906890643647977
		axis2_md5_nom = 133308086809380981344520323743369451609		



		m = hashlib.md5()
		m.update(repr(hull1))
		hull1_md5 = int(m.digest().encode('hex'),16)
		m = hashlib.md5()
		m.update(repr(hull2))
		hull2_md5 = int(m.digest().encode('hex'),16)

		m = hashlib.md5()
		m.update(repr(axis1))
		axis1_md5 = int(m.digest().encode('hex'),16)
		m = hashlib.md5()
		m.update(repr(axis2))
		axis2_md5 = int(m.digest().encode('hex'),16)

		if hull1_md5_nom == hull1_md5:
			print "hull1 PASS"
		else:
			print "hull1 FAIL"
			
		if hull1_md5_nom == hull2_md5:
			print "hull2 PASS"
		else:
			print "hull2 FAIL"

		if axis1_md5_nom == axis1_md5:
			print "axis1 PASS"
		else:
			print "axis1 FAIL"
			
		if axis1_md5_nom == axis2_md5:
			print "axis2 PASS"
		else:
			print "axis2 FAIL"
		
		return	


	def testSpline(self):
		PIXELSIZE = 0.05

		currNode = LocalNode(self.probe, self.contacts, 10, 19, PIXELSIZE)
		currNode.readFromFile2("result_2012_08_27", 10)			
		hull1, axis1 = computeHullAxis(10, currNode)

		spline1 = SplineFit(axis1, smooth=0.1)
		spline2 = SplineFit(axis1, smooth=0.1)
		
		points1 = spline1.getUniformSamples()
		points2 = spline2.getUniformSamples()

		m = hashlib.md5()
		m.update(repr(points1))
		points1_md5 = int(m.digest().encode('hex'),16)
		m = hashlib.md5()
		m.update(repr(points2))
		points2_md5 = int(m.digest().encode('hex'),16)
							
		#points1_md5_nom = 264552187170657706332967220739035361890
		#points2_md5_nom = 261841834995931355572820968043753689877			
		points1_md5_nom = 142045514102505096178425089179974358201
		points2_md5_nom = 142045514102505096178425089179974358201

		#print points1_md5
		#print points2_md5

		if points1_md5_nom == points1_md5:
			print "points1 PASS"
		else:
			print "points1 FAIL"
			
		if points1_md5_nom == points2_md5:
			print "points2 PASS"
		else:
			print "points2 FAIL"

		return
		
	def testToro(self):
		
		num_poses = 10
		
		poseGraph = PoseGraph(self.probe, self.contacts)					
		poseGraph.restoreState("result_2012_08_27", num_poses)

		PIXELSIZE = 0.05
		for i in range(0, num_poses):
			currNode = LocalNode(self.probe, self.contacts, i, 19, PIXELSIZE)
			currNode.readFromFile2("result_2012_08_27", i)		
			poseGraph.nodeHash[i] = currNode		
		
		
		poseGraph.mergePriorityConstraints()

		m = hashlib.md5()
		m.update(repr(poseGraph.edgePriorityHash))
		edges1_md5 = int(m.digest().encode('hex'),16)
		
		poseGraph = PoseGraph(self.probe, self.contacts)					
		poseGraph.restoreState("result_2012_08_27", num_poses)

		PIXELSIZE = 0.05
		for i in range(0, num_poses):
			currNode = LocalNode(self.probe, self.contacts, i, 19, PIXELSIZE)
			currNode.readFromFile2("result_2012_08_27", i)		
			poseGraph.nodeHash[i] = currNode		
		
		
		poseGraph.mergePriorityConstraints()
		
		m = hashlib.md5()
		m.update(repr(poseGraph.edgePriorityHash))
		edges2_md5 = int(m.digest().encode('hex'),16)
		
		edges1_md5_nom = 146731739815347910490180057980616635724
		edges2_md5_nom = 146731739815347910490180057980616635724

		if edges1_md5_nom == edges1_md5:
			print "edges1 PASS"
		else:
			print "edges1 FAIL"
			
		if edges2_md5_nom == edges2_md5:
			print "edges2 PASS"
		else:
			print "edges2 FAIL"


		#print edges1_md5
		#print edges2_md5
		
		#print repr(poseGraph.edgePriorityHash)
	

	def testToro2(self):

		v_list = [[0, [-0.69656099999999976, -0.11831700000000016, -3.1298899999999996]], [1, [0.31397799999999987, -0.094144199999999956, 3.1370599999999995]], [2, [-0.38625399999999999, -0.11516999999999952, -3.1361099999999995]], [3, [0.44747999999999993, -0.091837200000000396, -3.1330399999999998]], [4, [0.72331100000000037, -0.13192100000000073, 3.1136800000000004]], [5, [0.82902900000000013, -0.10230600000000187, 3.0883199999999995]], [6, [1.6474599999999997, -0.1280989999999978, -3.0624799999999999]], [7, [1.63567, -0.1183070000000002, -3.0602900000000002]], [8, [2.2231800000000006, -0.077014599999994146, -2.8193399999999995]], [9, [2.3150400000000011, 0.010028199999881152, -2.66615]], [10, [2.7589400000000004, 0.36634899999999732, -2.24885]], [11, [2.7464400000000007, 0.32556399999999686, -2.3212999999999999]], [12, [2.9896600000000002, 0.73262699999999847, -2.0222899999999999]], [13, [3.020290000000001, 0.77352499999999691, -2.05199]]]
		e_list = [[0, 1, [-1.0441123674414281, -0.011838488864785737, -0.017256113458139058], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [0, 2, [-0.27694739670586105, -2.2527633172356176e-05, -0.0051982323558723859], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [1, 3, [-0.16565369214524425, -0.0025006985313585917, 0.01226187131267464], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [2, 3, [-0.92526520240099441, -0.015211394695662711, -0.006255443549706587], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [2, 4, [-0.96045519840717508, 0.017731619945271671, -0.02166705113146198], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [3, 5, [-0.52855459224740342, 0.018853727687531491, -0.073541166270488664], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [4, 5, [-0.065744858829323058, -0.043868848838713531, -0.057658096476270071], [20.0, 0.0, 20.0, 5.0929581789406511, 0.0, 0.0]], [4, 6, [-0.89632226450126185, -0.023638454743338089, 0.12233811588455451], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [4, 7, [-0.91162540539732373, -0.039091729602436176, 0.10281065162183251], [10000.0, 0.0, 10000.0, 50.0, 0.0, 0.0]], [5, 7, [-0.84554885186793372, -0.029844824027026928, 0.12730663237729012], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [6, 7, [0.030387090545999938, 0.04855289285453674, -0.070770951062176124], [20.0, 0.0, 20.0, 5.0929581789406511, 0.0, 0.0]], [6, 8, [-0.63263116541381925, -0.022085130398830699, 0.26153865423877981], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [7, 9, [-0.63611765132192688, -0.055434303052519618, 0.37575120535559098], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [8, 9, [-0.16456030045337666, -0.059708555835989288, 0.15742351256097104], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [8, 10, [-0.68444372411634469, -0.25788774149479055, 0.57924567024163942], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [9, 11, [-0.48053855028706993, -0.076932199128738707, 0.3360882620925647], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [10, 11, [-0.0099255948619701544, 0.012430101742027782, -0.059336160817795081], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [10, 12, [-0.44035040182149432, -0.049133764132494318, 0.22340488202621045], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [11, 13, [-0.50447505781160296, -0.10596863547945568, 0.27246336360137524], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [12, 13, [-0.054012516311806265, 0.010427643354828327, -0.035410365455445521], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]]]		

		v_list.sort()
		e_list.sort()
		
		#print "v_list:", repr(v_list)
		#print "e_list:", repr(e_list)
		
		fileName = "fooFile"
		toro.writeConstrainedToroGraph(".", fileName + ".graph", v_list, e_list)
		toro.executeToro("./" + fileName + ".graph")
	
		finalFileName = fileName + "-treeopt-final.graph"
		v_list2, e_list2 = toro.readToroGraph("./" + finalFileName)		

		v_list2.sort()
		e_list2.sort()

		m = hashlib.md5()
		m.update(repr(v_list2))
		v_list_md5 = int(m.digest().encode('hex'),16)
		m = hashlib.md5()
		m.update(repr(e_list2))
		e_list_md5 = int(m.digest().encode('hex'),16)
				
		#print "v_list2:", repr(v_list2)
		#print "e_list2:", repr(e_list2)		

		v_list2 = [[0, [-0.69656099999999999, -0.11831700000000001, -3.1298900000000001]], [1, [0.31398100000000001, -0.094107300000000005, 3.1370200000000001]], [2, [-0.38625700000000002, -0.115207, -3.1360700000000001]], [3, [0.44748300000000002, -0.0917737, -3.13313]], [4, [0.723298, -0.13203400000000001, 3.1139100000000002]], [5, [0.82904, -0.102147, 3.08806]], [6, [1.6474299999999999, -0.128221, -3.0613800000000002]], [7, [1.63565, -0.118212, -3.0606800000000001]], [8, [2.2233000000000001, -0.076758199999999999, -2.81779]], [9, [2.3147700000000002, 0.010116099999999999, -2.6669800000000001]], [10, [2.7588400000000002, 0.36728, -2.2459099999999999]], [11, [2.7465700000000002, 0.32573200000000002, -2.3235299999999999]], [12, [2.9898699999999998, 0.73587400000000003, -2.0148199999999998]], [13, [3.0192399999999999, 0.77077600000000002, -2.0587399999999998]]]
		e_list2 = [[0, 1, [-1.0441100000000001, -0.0118385, -0.0172561], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [0, 2, [-0.276947, -2.2527600000000001e-05, -0.0051982299999999999], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [1, 3, [-0.165654, -0.0025006999999999998, 0.012261899999999999], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [2, 3, [-0.925265, -0.0152114, -0.0062554400000000001], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [2, 4, [-0.96045499999999995, 0.0177316, -0.021667100000000002], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [3, 5, [-0.528555, 0.018853700000000001, -0.073541200000000001], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [4, 5, [-0.065744899999999995, -0.043868799999999999, -0.057658099999999997], [20.0, 0.0, 20.0, 5.0929599999999997, 0.0, 0.0]], [4, 6, [-0.89632199999999995, -0.0236385, 0.122338], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [4, 7, [-0.91162500000000002, -0.0390917, 0.102811], [10000.0, 0.0, 10000.0, 50.0, 0.0, 0.0]], [5, 7, [-0.845549, -0.029844800000000001, 0.127307], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [6, 7, [0.0303871, 0.048552900000000003, -0.070771000000000001], [20.0, 0.0, 20.0, 5.0929599999999997, 0.0, 0.0]], [6, 8, [-0.63263100000000005, -0.0220851, 0.26153900000000002], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [7, 9, [-0.63611799999999996, -0.055434299999999999, 0.375751], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [8, 9, [-0.16456000000000001, -0.059708600000000001, 0.15742400000000001], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [8, 10, [-0.68444400000000005, -0.25788800000000001, 0.57924600000000004], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [9, 11, [-0.48053899999999999, -0.076932200000000006, 0.336088], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [10, 11, [-0.0099255899999999998, 0.012430099999999999, -0.059336199999999999], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [10, 12, [-0.44035000000000002, -0.049133799999999998, 0.22340499999999999], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [11, 13, [-0.50447500000000001, -0.10596899999999999, 0.27246300000000001], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]], [12, 13, [-0.054012499999999998, 0.0104276, -0.035410400000000002], [10.0, 0.0, 100.0, 50.0, 0.0, 0.0]]]


		m = hashlib.md5()
		m.update(repr(v_list2))
		v_list_md5_nom = int(m.digest().encode('hex'),16)
		m = hashlib.md5()
		m.update(repr(e_list2))
		e_list_md5_nom = int(m.digest().encode('hex'),16)

		if v_list_md5_nom == v_list_md5:
			print "v_list PASS"
		else:
			print "v_list FAIL"

		if e_list_md5_nom == e_list_md5:
			print "e_list PASS"
		else:
			print "e_list FAIL"

		v_list_1 = [[0, [-0.69656099999999999, -0.11831700000000001, -3.1298900000000001]], [1, [0.31398100000000001, -0.094107300000000005, 3.1370200000000001]], [2, [-0.38625700000000002, -0.115207, -3.1360700000000001]], [3, [0.44748300000000002, -0.0917737, -3.13313]], [4, [0.723298, -0.13203400000000001, 3.1139100000000002]], [5, [0.82904, -0.102147, 3.08806]], [6, [1.6474299999999999, -0.128221, -3.0613800000000002]], [7, [1.63565, -0.118212, -3.0606800000000001]], [8, [2.2233000000000001, -0.076758199999999999, -2.81779]], [9, [2.3147700000000002, 0.010116099999999999, -2.6669800000000001]], [10, [2.7588400000000002, 0.36728, -2.2459099999999999]], [11, [2.7465700000000002, 0.32573200000000002, -2.3235299999999999]], [12, [2.9898699999999998, 0.73587400000000003, -2.0148199999999998]], [13, [3.0192399999999999, 0.77077600000000002, -2.0587399999999998]]]
		v_list_2 = [[0, [-0.69656099999999999, -0.11831700000000001, -3.1298900000000001]], [1, [0.31397799999999998, -0.094144199999999997, 3.13706]], [2, [-0.38625399999999999, -0.11516999999999999, -3.13611]], [3, [0.44747999999999999, -0.091837199999999994, -3.1330399999999998]], [4, [0.72331100000000004, -0.13192100000000001, 3.11368]], [5, [0.82902900000000002, -0.10230599999999999, 3.08832]], [6, [1.6474599999999999, -0.12809899999999999, -3.0624799999999999]], [7, [1.63567, -0.118307, -3.0602900000000002]], [8, [2.2231800000000002, -0.077014600000000002, -2.81934]], [9, [2.3150400000000002, 0.010028199999999999, -2.66615]], [10, [2.7589399999999999, 0.36634899999999998, -2.24885]], [11, [2.7464400000000002, 0.32556400000000002, -2.3212999999999999]], [12, [2.9896600000000002, 0.73262700000000003, -2.0222899999999999]], [13, [3.0202900000000001, 0.77352500000000002, -2.05199]]]

		for k in range(len(v_list_1)):
			p1 = v_list_1[k][1]
			p2 = v_list_2[k][1]
			
			dist = sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)
			angDiff = p1[2]-p2[2]
			
			print dist, angDiff



	def testPCA(self):


		posture = [[0.32402250170707703, -1.9376647472381592, 2.5240442752838135], [0.20172742009162903, -1.8508090972900391, 2.5791583061218262], [0.074833497405052185, -1.7708220481872559, 2.5749032497406006], [-0.051718935370445251, -1.6902958154678345, 1.0533870458602905], [0.022475600242614746, -1.5599303245544434, 0.95854592323303223], [0.10868218541145325, -1.4371768236160278, 1.8182663917541504], [0.071939393877983093, -1.2917464971542358, -3.0718615055084229], [-0.077696070075035095, -1.3021976947784424, 2.8612296581268311], [-0.22183933854103088, -1.2606920003890991, 1.2641770839691162], [-0.17656373977661133, -1.1176880598068237, 0.83170008659362793], [-0.075520709156990051, -1.0068264007568359, 2.0582084655761719], [-0.14577186107635498, -0.87429428100585938, 2.5009474754333496], [-0.26602840423583984, -0.78463733196258545, 2.0668435096740723], [-0.33742135763168335, -0.65271675586700439, 0.47807663679122925], [-0.2042391449213028, -0.58370590209960938, 0.21110701560974121], [-0.057569209486246109, -0.55227452516555786, 1.2009902000427246], [-0.0033539943397045135, -0.41241493821144104, 1.7855242490768433], [-0.035316232591867447, -0.26585978269577026, 1.9033694267272949], [-0.084287673234939575, -0.12407895922660828, 0.97409385442733765], [0.0, 0.0, 0.0], [0.15000000596046448, 0.0, 0.076145566999912262], [0.29956534504890442, 0.011410800740122795, 0.86578977108001709], [0.39677116274833679, 0.12565189599990845, 1.946380615234375], [0.34174874424934387, 0.26519590616226196, 1.7029930353164673], [0.32197695970535278, 0.41388711333274841, 1.3524518013000488], [0.35446903109550476, 0.5603257417678833, 0.19331979751586914], [0.5016748309135437, 0.58914345502853394, -0.0050837248563766479], [0.65167289972305298, 0.58838087320327759, 0.57785046100616455], [0.77731871604919434, 0.67031455039978027, 1.8788957595825195], [0.73183149099349976, 0.8132513165473938, 2.0654768943786621], [0.66061890125274658, 0.94526934623718262, 1.1665383577346802], [0.71961939334869385, 1.0831785202026367, -0.035087704658508301], [0.86952710151672363, 1.0779165029525757, -0.065629377961158752], [1.0192041397094727, 1.0680791139602661, 0.95869624614715576], [1.1053922176361084, 1.1908456087112427, 1.8644802570343018], [1.0619701147079468, 1.3344231843948364, 1.7305004596710205], [1.0381162166595459, 1.4825143814086914, 1.3925573825836182], [1.0647107362747192, 1.6301380395889282, 0.31836950778961182], [1.2071727514266968, 1.6770907640457153, -1.2506951093673706]]

		x_list = []
		y_list = []
	
		for p in posture:
			x_list.append(p[0])
			y_list.append(p[1])
	
		cov_a = scipy.cov(x_list,y_list)
	
		loadings = []
	
		" NOTE:  seems to create opposing colinear vectors if data is colinear, not orthogonal vectors "
	
		scores, loadings, E = pca_module.nipals_mat(cov_a, 2, 0.000001, False)	

		m = hashlib.md5()
		m.update(repr(loadings))
		loadings1_md5 = int(m.digest().encode('hex'),16)

		scores, loadings, E = pca_module.nipals_mat(cov_a, 2, 0.000001, False)	

		m = hashlib.md5()
		m.update(repr(loadings))
		loadings2_md5 = int(m.digest().encode('hex'),16)

		loadings1_md5_nom = 4604468617513472537582329011925291178
		loadings2_md5_nom = 4604468617513472537582329011925291178

		if loadings1_md5_nom == loadings1_md5:
			print "loadings1 PASS"
		else:
			print "loadings1 FAIL"
			
		if loadings2_md5_nom == loadings2_md5:
			print "loadings2 PASS"
		else:
			print "loadings2 FAIL"

	def testSCSGP(self):
		totalHypotheses = 3
		A = matrix(totalHypotheses*totalHypotheses*[0.0], dtype=float)
		A.resize(totalHypotheses, totalHypotheses)

		errPac = 1.0
		results = []
		for i in range(totalHypotheses):
			for j in range(i+1, totalHypotheses):
				results.append([errPac, i, j])
				errPac += 1.0
				
		for result in results:
			i = result[1]
			j = result[2]
			A[i,j] = result[0]
			A[j,i] = result[0]
	

		e, lmbda = scsgp.dominantEigenvectors2(A)

		m = hashlib.md5()
		m.update(repr(e))
		e1_md5 = int(m.digest().encode('hex'),16)

		m = hashlib.md5()
		m.update(repr(lmbda))
		lmbda1_md5 = int(m.digest().encode('hex'),16)

		e1_md5_nom = 74415382024037744883544301949964047172
		lmbda1_md5_nom = 91214331286978604462059783908825041166

		if e1_md5_nom == e1_md5:
			print "e1 PASS"
		else:
			print "e1 FAIL"
			
		if lmbda1_md5_nom == lmbda1_md5:
			print "lamda1 PASS"
		else:
			print "lamda1 FAIL"

	def testAlpha(self):
		
		random.seed(0)
	
		medialPointSoup = [[1.3935753748637394, -0.27533840163379275], [1.5289332552652444, -0.27885965029715398], [1.6346755432423854, -0.2806436966570674], [1.7593979186596327, -0.27761065060824958], [1.8651658042098906, -0.27655969812232217], [1.9606158384518306, -0.21867761140101893], [1.9847183425326689, -0.086233009030694918], [1.9402916170248856, 0.057447356528043614], [1.8481372638510409, 0.1243961683198008], [1.7360000971646701, 0.12893611914773115], [1.6008454354990531, 0.12799778594718114], [1.4759278279065211, 0.12204069125490966], [1.3758335776652242, 0.11923319527628266], [1.2457742731055237, 0.11566892233284358], [1.1155313454148787, 0.11221597531605151], [1.0152920935542458, 0.10964775136098984], [0.88551387578769236, 0.11094668923650036], [0.77967972895713211, 0.11003250837098301], [0.65493144225551581, 0.099880198977979867], [0.51926562355876305, 0.10305225214678342], [0.41924406674786169, 0.10037113208368151], [0.28906880479130337, 0.098048679365717789], [0.12906904205217001, 0.098324221415398705], [-0.01027441766970868, 0.074752535056653108], [-0.16447519594342019, 0.073576667461495021], [-0.32424675533297326, 0.082123527132189372], [-0.48401831472252621, 0.090670386802883571], [-0.63845344058711573, 0.088114091586746907], [-0.76315256789645103, 0.079655796233655415], [-0.92286753441537872, 0.070109620567042452], [-1.0825825009343064, 0.060563444900429586], [-1.2081326067493543, 0.068298109149258018], [-1.3329655736442891, 0.055327341458910606], [-1.4928584878589881, 0.061180202633660252], [-1.6527514020736871, 0.067033063808410176], [-1.8126443162883861, 0.072885924983159822], [-1.9446508549073804, 0.050288197140160751], [-2.0991742770649169, 0.036984537630623537], [-2.2590154529551678, 0.029857231686433283], [-2.4129861165990514, 0.034109040890471176], [-2.545703960462899, 0.040065384722962505], [-2.6578340641421527, -0.0036219779160480137], [-2.7587966046956804, -0.10505200105873347], [-2.8463751425388959, -0.20997575103636917], [-2.8585976829860233, -0.30224374487934302], [-2.7597245751477346, -0.34045448990954713], [-2.6259946982056439, -0.32711304672845176], [-2.4661267598460683, -0.32061364024330752], [-2.3062588214864936, -0.31411423375816344], [-2.184973662868003, -0.33695652985064062], [-2.0807492715474223, -0.30731740044476735], [-1.9207837137842048, -0.31063708860825273], [-1.7608181560209879, -0.31395677677173806], [-1.6222550532104798, -0.32954718003423183], [-1.4976353711685757, -0.3192254987383043], [-1.3378682870155298, -0.31059538742769033], [-1.1781012028624842, -0.3019652761170763], [-1.0183341187094386, -0.29333516480646227], [-0.90227374569468433, -0.31608997705426545], [-0.79274179815256107, -0.29434735293208353], [-0.63274235474486551, -0.29476938282158766], [-0.47274291133717006, -0.29519141271109173], [-0.33983086175151711, -0.30851538728662692], [-0.21526319720039652, -0.29837424775219196], [-0.09294087346774807, -0.26224397899016966], [0.067024755992605711, -0.26556021048885464], [0.22699038545295896, -0.26887644198753929], [0.36425673868852249, -0.29317896268238963], [0.52173111945500517, -0.29240260452303396], [0.62252303838266831, -0.29439328288487721], [0.74705460009496749, -0.28626056731785299], [0.8527713298304207, -0.29029566514017502], [0.97741858251634228, -0.28005980260436736], [1.113058999208784, -0.28335681405237678], [1.2133257580381009, -0.28038885935664021], [1.3433874873136535, -0.27687733628158212], [0.92594492671705664, 0.072228178071105265], [0.7661875234899217, 0.081035681356523392], [0.60643012026278686, 0.089843184641941631], [0.45492349080666383, 0.098195818759311881], [0.31470721232689558, 0.10521189257933722], [0.19465059987620123, 0.096958690455902538], [0.035071968623708129, 0.085354361626503186], [-0.11923950365165686, 0.082963215755310071], [-0.22981467264608904, 0.099801661993082019], [-0.35005755324713439, 0.083968287066957081], [-0.50903200285423589, 0.065881707176906945], [-0.64913929753483601, 0.049941650238938179], [-0.78001985772718863, 0.081149146914190701], [-0.91114703488558435, 0.11210712390673258], [-1.0504410169549243, 0.08778007007223626], [-1.1755273133111293, 0.084153081253985379], [-1.3301311534642737, 0.074561172239197393], [-1.4458799722729248, 0.090968144884405411], [-1.5769179403168645, 0.12231337597169395], [-1.725819435150977, 0.10158305304264004], [-1.8849321179938154, 0.084755867937746421], [-2.0303670682381658, 0.074868236867863924], [-2.1505639456969594, 0.074254692460435923], [-2.2507883857724691, 0.07708695089226314], [-2.3754348810275183, 0.073233469267452445], [-2.4067956476550312, -0.057793560449834414], [-2.4029873882771073, -0.18279957614712161], [-2.3645746222413231, -0.30150940895586598], [-2.2143000275311886, -0.32428748972491217], [-2.1033392108671114, -0.33392509671881643], [-1.9783205277207969, -0.33000465039525861], [-1.8586194880334679, -0.32138207029530336], [-1.7336316612201121, -0.31763438454614223], [-1.6034681868099885, -0.32104267208447967], [-1.4785547062067286, -0.31510292387455741], [-1.3535996161142332, -0.31339688217425354], [-1.2234717720809369, -0.31678948566000892], [-1.0935481639149085, -0.3134634132916802], [-0.99824013453536664, -0.31580836092104614], [-0.87351847294947349, -0.3119992416981946], [-0.74861420583273341, -0.30810099773072058], [-0.61857351071731648, -0.30924074581310435], [-0.498406728699052, -0.3006428802471709], [-0.33862840186329612, -0.29222348160080774], [-0.17885007502754025, -0.28380408295444459], [-0.053972972926452402, -0.27722377807071391], [0.095941415390628573, -0.29996024475015715], [0.19585257330021005, -0.26964717838485586], [0.35570574860607773, -0.27650008613496646], [0.51555892391194547, -0.28335299388507695], [0.65143467839553681, -0.28836884138001539], [0.7570215814843918, -0.29788359067504783], [0.88085648734928113, -0.26461703298075268], [1.0408273836200932, -0.26156541925796795], [1.2007982798909052, -0.25851380553518322], [1.344162055286872, -0.2680352844044237], [1.471547992807654, -0.28163093982970466], [1.5957689484881055, -0.25197359016166104], [1.7553440178102104, -0.26362679791083077], [1.9149190871323163, -0.2752800056600006], [2.0719685036898148, -0.28283418808019001], [2.1665069100392991, -0.23757866471349282], [2.2794071297408007, -0.16420447724005222], [2.4074690908362206, -0.11965228833459729], [2.5265665398119928, -0.081164323209314326], [2.5949670391330635, -0.032760900696210515], [2.5303907375538537, 0.097712981463588311], [2.4453656769355843, 0.10287703252550484], [2.3217430790572195, 0.047504220141101006], [2.192617941391926, 0.052595766379089803], [2.0330456188975274, 0.06428652742119989], [1.8762730227670397, 0.075772171865443272], [1.7451587199974887, 0.10697424566278169], [1.6006428326337647, 0.087912841669557429], [1.4406719443012943, 0.084860811833482597], [1.2807010559688239, 0.081808781997407432], [1.1384556985458312, 0.094222796979245405], [1.0026527370258635, 0.094611278344889416]]
		vert_md5_nom = 309190435843255422902767581684566207722
		
		radius = 0.2

		numPoints = len(medialPointSoup)
		inputStr = str(numPoints) + " "

		" alpha shape circle radius "
		inputStr += str(radius) + " "

		isDone = False
		
		while not isDone:

			inputStr = str(numPoints) + " "
	
			" alpha shape circle radius "
			inputStr += str(radius) + " "
			
			for p in medialPointSoup:
				p2 = copy(p)
				" add a little bit of noise to avoid degenerate conditions in CGAL "
				p2[0] += random.gauss(0.0,0.000001)
				p2[1] += random.gauss(0.0,0.000001)
	
				inputStr += str(p2[0]) + " " + str(p2[1]) + " "
			
			inputStr += "\n"
			
			try:			
				" start the subprocess "
				if sys.platform == "win32":
					subProc = Popen(["alpha2.exe"], stdin=PIPE, stdout=PIPE)
				else:
					subProc = Popen(["./alpha2"], stdin=PIPE, stdout=PIPE)
					
				
				" send input and receive output "
				sout, serr = subProc.communicate(inputStr)
		
				" convert string output to typed data "
				sArr = sout.split(" ")
				
				numVert = int(sArr[0])
				
				sArr = sArr[1:]
				#print "hull has", numVert, "vertices"
				if numVert <= 2:
					print "Failed, hull had only", numVert, "vertices"
					raise
				
				vertices = []
				for i in range(len(sArr)/2):
					vertices.append([float(sArr[2*i]), float(sArr[2*i + 1])])
				isDone = True
			except:
				print "hull has holes!  retrying..."
				#print sArr	

		print "nomPoints = " + repr(vertices)
		m = hashlib.md5()
		m.update(repr(vertices))
		vert_md5 = int(m.digest().encode('hex'),16)	
		
		if vert_md5 == vert_md5_nom:
			print "alpha PASS"
		else:
			print "alpha FAIL"


	def testAlpha2(self):
		
		random.seed(0)
	
		medialPointSoup = [[1.3935753748637394, -0.27533840163379275], [1.5289332552652444, -0.27885965029715398], [1.6346755432423854, -0.2806436966570674], [1.7593979186596327, -0.27761065060824958], [1.8651658042098906, -0.27655969812232217], [1.9606158384518306, -0.21867761140101893], [1.9847183425326689, -0.086233009030694918], [1.9402916170248856, 0.057447356528043614], [1.8481372638510409, 0.1243961683198008], [1.7360000971646701, 0.12893611914773115], [1.6008454354990531, 0.12799778594718114], [1.4759278279065211, 0.12204069125490966], [1.3758335776652242, 0.11923319527628266], [1.2457742731055237, 0.11566892233284358], [1.1155313454148787, 0.11221597531605151], [1.0152920935542458, 0.10964775136098984], [0.88551387578769236, 0.11094668923650036], [0.77967972895713211, 0.11003250837098301], [0.65493144225551581, 0.099880198977979867], [0.51926562355876305, 0.10305225214678342], [0.41924406674786169, 0.10037113208368151], [0.28906880479130337, 0.098048679365717789], [0.12906904205217001, 0.098324221415398705], [-0.01027441766970868, 0.074752535056653108], [-0.16447519594342019, 0.073576667461495021], [-0.32424675533297326, 0.082123527132189372], [-0.48401831472252621, 0.090670386802883571], [-0.63845344058711573, 0.088114091586746907], [-0.76315256789645103, 0.079655796233655415], [-0.92286753441537872, 0.070109620567042452], [-1.0825825009343064, 0.060563444900429586], [-1.2081326067493543, 0.068298109149258018], [-1.3329655736442891, 0.055327341458910606], [-1.4928584878589881, 0.061180202633660252], [-1.6527514020736871, 0.067033063808410176], [-1.8126443162883861, 0.072885924983159822], [-1.9446508549073804, 0.050288197140160751], [-2.0991742770649169, 0.036984537630623537], [-2.2590154529551678, 0.029857231686433283], [-2.4129861165990514, 0.034109040890471176], [-2.545703960462899, 0.040065384722962505], [-2.6578340641421527, -0.0036219779160480137], [-2.7587966046956804, -0.10505200105873347], [-2.8463751425388959, -0.20997575103636917], [-2.8585976829860233, -0.30224374487934302], [-2.7597245751477346, -0.34045448990954713], [-2.6259946982056439, -0.32711304672845176], [-2.4661267598460683, -0.32061364024330752], [-2.3062588214864936, -0.31411423375816344], [-2.184973662868003, -0.33695652985064062], [-2.0807492715474223, -0.30731740044476735], [-1.9207837137842048, -0.31063708860825273], [-1.7608181560209879, -0.31395677677173806], [-1.6222550532104798, -0.32954718003423183], [-1.4976353711685757, -0.3192254987383043], [-1.3378682870155298, -0.31059538742769033], [-1.1781012028624842, -0.3019652761170763], [-1.0183341187094386, -0.29333516480646227], [-0.90227374569468433, -0.31608997705426545], [-0.79274179815256107, -0.29434735293208353], [-0.63274235474486551, -0.29476938282158766], [-0.47274291133717006, -0.29519141271109173], [-0.33983086175151711, -0.30851538728662692], [-0.21526319720039652, -0.29837424775219196], [-0.09294087346774807, -0.26224397899016966], [0.067024755992605711, -0.26556021048885464], [0.22699038545295896, -0.26887644198753929], [0.36425673868852249, -0.29317896268238963], [0.52173111945500517, -0.29240260452303396], [0.62252303838266831, -0.29439328288487721], [0.74705460009496749, -0.28626056731785299], [0.8527713298304207, -0.29029566514017502], [0.97741858251634228, -0.28005980260436736], [1.113058999208784, -0.28335681405237678], [1.2133257580381009, -0.28038885935664021], [1.3433874873136535, -0.27687733628158212], [0.92594492671705664, 0.072228178071105265], [0.7661875234899217, 0.081035681356523392], [0.60643012026278686, 0.089843184641941631], [0.45492349080666383, 0.098195818759311881], [0.31470721232689558, 0.10521189257933722], [0.19465059987620123, 0.096958690455902538], [0.035071968623708129, 0.085354361626503186], [-0.11923950365165686, 0.082963215755310071], [-0.22981467264608904, 0.099801661993082019], [-0.35005755324713439, 0.083968287066957081], [-0.50903200285423589, 0.065881707176906945], [-0.64913929753483601, 0.049941650238938179], [-0.78001985772718863, 0.081149146914190701], [-0.91114703488558435, 0.11210712390673258], [-1.0504410169549243, 0.08778007007223626], [-1.1755273133111293, 0.084153081253985379], [-1.3301311534642737, 0.074561172239197393], [-1.4458799722729248, 0.090968144884405411], [-1.5769179403168645, 0.12231337597169395], [-1.725819435150977, 0.10158305304264004], [-1.8849321179938154, 0.084755867937746421], [-2.0303670682381658, 0.074868236867863924], [-2.1505639456969594, 0.074254692460435923], [-2.2507883857724691, 0.07708695089226314], [-2.3754348810275183, 0.073233469267452445], [-2.4067956476550312, -0.057793560449834414], [-2.4029873882771073, -0.18279957614712161], [-2.3645746222413231, -0.30150940895586598], [-2.2143000275311886, -0.32428748972491217], [-2.1033392108671114, -0.33392509671881643], [-1.9783205277207969, -0.33000465039525861], [-1.8586194880334679, -0.32138207029530336], [-1.7336316612201121, -0.31763438454614223], [-1.6034681868099885, -0.32104267208447967], [-1.4785547062067286, -0.31510292387455741], [-1.3535996161142332, -0.31339688217425354], [-1.2234717720809369, -0.31678948566000892], [-1.0935481639149085, -0.3134634132916802], [-0.99824013453536664, -0.31580836092104614], [-0.87351847294947349, -0.3119992416981946], [-0.74861420583273341, -0.30810099773072058], [-0.61857351071731648, -0.30924074581310435], [-0.498406728699052, -0.3006428802471709], [-0.33862840186329612, -0.29222348160080774], [-0.17885007502754025, -0.28380408295444459], [-0.053972972926452402, -0.27722377807071391], [0.095941415390628573, -0.29996024475015715], [0.19585257330021005, -0.26964717838485586], [0.35570574860607773, -0.27650008613496646], [0.51555892391194547, -0.28335299388507695], [0.65143467839553681, -0.28836884138001539], [0.7570215814843918, -0.29788359067504783], [0.88085648734928113, -0.26461703298075268], [1.0408273836200932, -0.26156541925796795], [1.2007982798909052, -0.25851380553518322], [1.344162055286872, -0.2680352844044237], [1.471547992807654, -0.28163093982970466], [1.5957689484881055, -0.25197359016166104], [1.7553440178102104, -0.26362679791083077], [1.9149190871323163, -0.2752800056600006], [2.0719685036898148, -0.28283418808019001], [2.1665069100392991, -0.23757866471349282], [2.2794071297408007, -0.16420447724005222], [2.4074690908362206, -0.11965228833459729], [2.5265665398119928, -0.081164323209314326], [2.5949670391330635, -0.032760900696210515], [2.5303907375538537, 0.097712981463588311], [2.4453656769355843, 0.10287703252550484], [2.3217430790572195, 0.047504220141101006], [2.192617941391926, 0.052595766379089803], [2.0330456188975274, 0.06428652742119989], [1.8762730227670397, 0.075772171865443272], [1.7451587199974887, 0.10697424566278169], [1.6006428326337647, 0.087912841669557429], [1.4406719443012943, 0.084860811833482597], [1.2807010559688239, 0.081808781997407432], [1.1384556985458312, 0.094222796979245405], [1.0026527370258635, 0.094611278344889416]]
		nomPoints = [[1.39358, -0.27533999999999997], [1.4715499999999999, -0.28162999999999999], [1.5289299999999999, -0.27885900000000002], [1.6346700000000001, -0.280644], [1.7594000000000001, -0.277611], [1.8651599999999999, -0.27655999999999997], [1.91492, -0.275281], [2.0719699999999999, -0.28283399999999997], [2.1665100000000002, -0.23757600000000001], [2.2794099999999999, -0.16420399999999999], [2.40747, -0.119653], [2.52657, -0.081164200000000006], [2.59497, -0.032760699999999997], [2.5303900000000001, 0.097712900000000005], [2.44536, 0.102878], [2.1926199999999998, 0.052595200000000002], [2.0330499999999998, 0.0642842], [1.8481399999999999, 0.12439500000000001], [1.736, 0.12893399999999999], [1.60084, 0.127999], [1.47593, 0.12204], [1.3758300000000001, 0.11923300000000001], [1.24577, 0.11566899999999999], [1.1155299999999999, 0.112215], [1.01529, 0.109648], [0.88551400000000002, 0.110948], [0.77968000000000004, 0.110032], [0.65493100000000004, 0.099879200000000001], [0.51926600000000001, 0.103051], [0.41924499999999998, 0.100371], [0.31470599999999999, 0.105212], [0.19464999999999999, 0.096958199999999994], [0.12906799999999999, 0.098325999999999997], [0.035071600000000001, 0.085355200000000006], [-0.119239, 0.082962599999999997], [-0.22981499999999999, 0.099801600000000004], [-0.35005799999999998, 0.083967399999999998], [-0.484018, 0.090670799999999996], [-0.63845600000000002, 0.088113999999999998], [-0.76315200000000005, 0.079656599999999994], [-0.78002000000000005, 0.081149799999999994], [-0.91114899999999999, 0.112109], [-1.05044, 0.087778999999999996], [-1.17553, 0.084152099999999994], [-1.33013, 0.0745619], [-1.4458800000000001, 0.090968199999999999], [-1.5769200000000001, 0.12231400000000001], [-1.7258199999999999, 0.10158200000000001], [-1.88493, 0.084754999999999997], [-2.03037, 0.074868799999999999], [-2.15056, 0.074253700000000006], [-2.2507899999999998, 0.077086699999999994], [-2.3754400000000002, 0.073233699999999999], [-2.5457000000000001, 0.040064000000000002], [-2.6578400000000002, -0.0036222300000000002], [-2.7587999999999999, -0.10505299999999999], [-2.8463699999999998, -0.209978], [-2.8586, -0.30224499999999999], [-2.7597200000000002, -0.34045500000000001], [-2.6259999999999999, -0.32711299999999999], [-2.4661200000000001, -0.32061400000000001], [-2.30626, -0.31411499999999998], [-2.1849699999999999, -0.33695700000000001], [-2.1033400000000002, -0.33392500000000003], [-1.9783200000000001, -0.33000600000000002], [-1.8586199999999999, -0.321378], [-1.73363, -0.317635], [-1.62225, -0.32954800000000001], [-1.4976400000000001, -0.31922600000000001], [-1.3535999999999999, -0.31339600000000001], [-1.2234700000000001, -0.31679000000000002], [-1.09355, -0.31346499999999999], [-0.99824000000000002, -0.31580799999999998], [-0.90227400000000002, -0.31608999999999998], [-0.87351999999999996, -0.31200099999999997], [-0.74861500000000003, -0.30809799999999998], [-0.61857200000000001, -0.30924000000000001], [-0.49840699999999999, -0.30064299999999999], [-0.33983099999999999, -0.30851499999999998], [-0.21526300000000001, -0.29837399999999997], [-0.053972199999999998, -0.277223], [0.095940899999999996, -0.29996099999999998], [0.364257, -0.29317900000000002], [0.52173099999999994, -0.29240100000000002], [0.62252300000000005, -0.29439300000000002], [0.75702199999999997, -0.29788399999999998], [0.85277400000000003, -0.290294], [0.97741900000000004, -0.280059], [1.1130599999999999, -0.28335900000000003], [1.21333, -0.280389], [1.3433900000000001, -0.27688000000000001], [1.39358, -0.27533999999999997]]
	
	
		#vert_md5_nom = 309190435843255422902767581684566207722
		vert_md5_nom = 155861658077480672408011483909217870768
		
		" alpha shape circle radius "
		radius = 0.2
	
		numPoints = len(medialPointSoup)
	
		isDone = False
		
		while not isDone:
	
			perturbPoints = []
			
			for p in medialPointSoup:
				p2 = copy(p)
				" add a little bit of noise to avoid degenerate conditions in CGAL "
				p2[0] += random.gauss(0.0,0.000001)
				p2[1] += random.gauss(0.0,0.000001)
	
				perturbPoints.append(p2)
	
	
			
			try:			
	
				vertices = alphamod.doAlpha(radius,perturbPoints)
				numVert = len(vertices)
				
				if numVert <= 2:
					print "Failed, hull had only", numVert, "vertices"
					raise
				
				isDone = True
			except:
				print "hull has holes!  retrying..."
				#print sArr	
	
		m = hashlib.md5()
		m.update(repr(vertices))
		vert_md5 = int(m.digest().encode('hex'),16)	
		
		if vert_md5 == vert_md5_nom:
			print "alpha PASS"
		else:
			print "alpha FAIL"
	
		#for k in range(len(vertices)):
		#	print nomPoints[k], vertices[k]
	
		#print "vert_md5_nom = " + repr(vert_md5)
	
		#print nomPoints[-1]
		#print numPoints, len(nomPoints), len(vertices)

