# /*
# SnakeApp.cpp
# --------------------------
# The main applicatin that handles switching between the
# different scenes in this demo, as well as any common 
# setup and input handling.
# */


import random
random.seed(0)

ANY_QUERY_MASK                  = 1<<0
STATIC_GEOMETRY_QUERY_MASK      = 1<<4
WORLD_STEP = 0.001

import ogre.renderer.OGRE as ogre
#import ogre.physics.OgreOde as OgreOde
import ogre.io.OIS as OIS
import sf_OIS as sf

#from opaque.robot.SuperbotSnake import SuperbotSnake
#from opaque.robot.PhysXProbe import PhysXProbe
from opaque.robot.BulletProbe import BulletProbe
from opaque.TestModular import TestModular
from opaque.TestNavigation import TestNavigation
from opaque.TestHoldPosition import TestHoldPosition
from opaque.TestHoldTransition import TestHoldTransition
from opaque.TestHoldTransition import TestHoldTransition
from opaque.TestHoldSlideTransition import TestHoldSlideTransition
from opaque.TestAnchorTransition import TestAnchorTransition
from opaque.TestFrontExtend import TestFrontExtend
from opaque.TestPokeWalls import TestPokeWalls
from opaque.ControlError import *

#from opaque.environment.WallSections import WallSections
from DrawThings import DrawThings


import traceback 
import cProfile
import sys
from math import cos, sin, pi
from copy import copy

" sub process cleanup code "
import opaque.maps.gen_icp as gen_icp
import atexit
def cleanup():
	if gen_icp.overlapPool != None:
		for p in gen_icp.overlapPool:
			p.terminate()
atexit.register(cleanup)



import opaque.control as controls


targetMapFile = ""
probeDisplacement = 0.0

class SimpleScenesFrameListener ( sf.FrameListener ):
	def __init__( self, demo, renderWindow, camera, probe ):
		self._demo = demo
		self.probe = probe
		self.rWindow = renderWindow
		self.camera = camera

		sf.FrameListener.__init__(self, renderWindow, camera)

		# slow the window navigation to a reasonable speed
		self.moveSpeed = 6.0


		self.renderCount = 0


	def __del__(self):
		sf.FrameListener.__del__(self)

	def frameStarted(self, evt):
		result = sf.FrameListener.frameStarted(self, evt)

		#self.rWindow.writeContentsToFile("testfile.png")

		# render window
		self._demo.frameStarted(evt, self.Keyboard, self.Mouse)

		self.probe.perturbProbe(self.Keyboard.isKeyDown(OIS.KC_O))
		self.probe.frameStarted(evt)
		
		
		self.adjustCamera()

		if self.renderCount >= 200:
			self.rWindow.update()
			self.renderCount = 0
		else:
			self.renderCount += 1
		
		return result

	def adjustCamera(self):

		pose = self.probe.getActualJointPose(9)
		#pose = self.probe.getActualJointPose(19)
		xAvg = pose[0]
		yAvg = pose[1]
		
		prevPose = self.camera.getPosition()
		xPrev = prevPose[0] + 1
		yPrev = prevPose[2]
		zPrev = prevPose[1]
		
		newPose = [xPrev*0.99 + 0.01*xAvg, yPrev*0.99 + 0.01*yAvg, 12]

		#self.camera.setPosition(newPose[0]+1,newPose[2],newPose[1])
		#newPose[0] = -6.0
		#newPose[2] = 0.0

		self.camera.setPosition(newPose[0]-1,newPose[2],newPose[1])
		#self.camera.setPosition(-2.0,9.0,0.0)

		oriQuat = ogre.Quaternion(ogre.Radian(-pi/2.0), ogre.Vector3().UNIT_X)
		self.camera.setOrientation(oriQuat)
		
	def frameEnded(self, evt):
		self._demo.frameEnded(evt, self.Keyboard, self.Mouse)
		return sf.FrameListener.frameEnded(self, evt)

# /*
# Create the scene from an ogre point of view
# and create the common OgreOde things we'll need
# */
class SnakeApp(sf.Application):
	def __init__ ( self ):
		sf.Application.__init__(self)
		self._plane = 0
		self._stepper = 0   
		self._world = 0
		self._spot=None
		self._time_elapsed = 0.0

		#self._time_step = WORLD_STEP ## SimpleScenes::WORLD_STEP

		self._looking = self._chasing = False
		self._paused = False
		self.probe = 0

	def __del__ ( self ):
		del self._plane
		del self._stepper
		del self._world
		del self.probe

	def _createScene(self):

		global targetMapFile, probeDisplacement

		sceneManager = self.sceneManager
		ogre.MovableObject.setDefaultQueryFlags (ANY_QUERY_MASK)
		self.shadowtype=0

		## Set up shadowing
		sceneManager.setShadowTechnique(ogre.SHADOWTYPE_TEXTURE_MODULATIVE)
		sceneManager.setShadowColour((0.5, 0.5, 0.5))
		sceneManager.setShadowFarDistance(30)

		if self.root.getRenderSystem().getName().startswith ('direct'): 
			sceneManager.setShadowTextureSettings(1024, 2)
		else: 
			sceneManager.setShadowTextureSettings(512, 2)

		## Add some default lighting to the scene
		sceneManager.setAmbientLight( (.8, .8, .8) )
		light = sceneManager.createLight('MainLight')
		light.setPosition (0, 0, 1)
		light.CastShadows=True

		## Give us some sky
		sceneManager.setSkyBox(True,"kk3d/DesertVII", 5000, True) # Examples/SpaceSkyBox",5000,True)

		## Position and orient the camera
		self.camera.setPosition(2,10,0)
		#self.camera.lookAt(-7,0.5,0)
		self.camera.setNearClipDistance(0.1)

		self.root.getSingleton().setFrameSmoothingPeriod(5.0)

		## Create a default plane to act as the ground
		s = sceneManager.createStaticGeometry("StaticFloor")
		s.setRegionDimensions((160.0, 100.0, 160.0))

		## Set the region origin so the center is at 0 world
		s.setOrigin(ogre.Vector3(0,0,0))

		## Use a load of meshes to represent the floor
		i = 0
		for z in range (-80, 80, 20 ):
			for x in range (-80, 80, 20):
				name = "Plane_" + str(i)
				i += 1

				entity = sceneManager.createEntity(name, "plane.mesh")
				entity.setQueryFlags (STATIC_GEOMETRY_QUERY_MASK)
				#entity.setUserObject(self._plane)
				entity.setCastShadows(False)
				s.addEntity(entity, ogre.Vector3(x,0,z))

		s.build()

		yRot = ogre.Quaternion(ogre.Degree(180.0), ogre.Vector3().UNIT_Y)
		zRot = ogre.Quaternion(ogre.Degree(90.0), ogre.Vector3().UNIT_Z)

		#pos = ogre.Vector3(1.65,0.04,0.0)
		pos = ogre.Vector3(1.65,0.04,0.0)

		#self.probe = PhysXProbe(self.sceneManager,yRot,pos,40,0.15,0.2,0.15,30.0*2.5,0.9)
		#self.probe = PhysXProbe(self.sceneManager,yRot,pos,40,0.15,0.2,0.15,1000.0,0.9)

		
		#self.probe = PhysXProbe(self.sceneManager,yRot,pos,40,0.15,0.2,0.15,100.0,0.9)
		#self.probe = PhysXProbe(self.sceneManager,yRot,pos,40,0.15,0.1,0.15,1000.0,0.9)
		#self.probe = BulletProbe(self.sceneManager,yRot,pos,40,0.15,0.1,0.15,1000.0,1.0)
		self.probe = BulletProbe(self.sceneManager,yRot,pos,40,0.15,0.1,0.15,1000.0,1.0)
		
		#exit()
		

		#self.probe = SuperbotSnake(self._world,yRot,pos,40,0.15,0.15,30.0*2.5,0.9)
		#self.probe = SuperbotSnake(self._world,zRot,pos,40,0.15,0.15,30.0*2.5,0.9)

		self.probe.translatePose(probeDisplacement)

		#f = open("poses000160.txt", 'r')
		#str_f = f.read()
		#poses = eval(str_f)
		#print poses
		#self.probe.restorePose(poses)
		
		self.renderWindow.setAutoUpdated(False)
		
		self.drawThings = DrawThings(self.probe.robotParam)
		self.drawThings.setSim(self.sceneManager)
		self.drawThings.setRenderView(self.renderWindow)

		currControl = TestNavigation(self.probe, self.drawThings)	
		#currControl = TestModular(self.probe, self.drawThings)	
		#currControl = TestAnchorTransition(self.probe, self.drawThings)
		#currControl = TestHoldPosition(self.probe, self.drawThings)
		#currControl = TestHoldTransition(self.probe, self.drawThings)
		#currControl = TestHoldSlideTransition(self.probe, self.drawThings)
		#currControl = TestFrontExtend(self.probe, self.drawThings)
		#currControl = TestPokeWalls(self.probe, self.drawThings)
		
		currControl.setRenderWindow(self.renderWindow)
		currControl.setCamera(self.camera)
		self.probe.addControl(currControl)
		
		"""
		WLEN = 3.0
		wall1 = [[-14.0, -0.2], [-4.0, -0.2], [-4.0 + WLEN*cos(pi/3), -0.2 - WLEN*sin(pi/3)]]
		wall2 = [[-4.0 + WLEN*cos(pi/3), 0.2 + WLEN*sin(pi/3)], [-4.0, 0.2] ,[-14.0, 0.2]]
		wall3 = [[0.4*cos(pi/6) - 4.0 + WLEN*cos(pi/3), -WLEN*sin(pi/3)], [0.4*cos(pi/6) - 4.0, 0.0], [0.4*cos(pi/6) - 4.0 + WLEN*cos(pi/3), WLEN*sin(pi/3)]]
		# caps to the corridors
		wall4 = [[-4.0 + WLEN*cos(pi/3), -0.2 - WLEN*sin(pi/3)],[0.4*cos(pi/6) - 4.0 + WLEN*cos(pi/3), -WLEN*sin(pi/3)]]
		wall5 = [[0.4*cos(pi/6) - 4.0 + WLEN*cos(pi/3), WLEN*sin(pi/3)], [-4.0 + WLEN*cos(pi/3), 0.2 + WLEN*sin(pi/3)]]
		walls = envs.WallSections(self._world, [wall1, wall2, wall3, wall4, wall5])
		"""
		
		walls = []
		
		if targetMapFile != "":
			" junction test "
			f = open(targetMapFile, 'r')
			str_f = f.read()
			walls = eval(str_f)

		else:
			"""
			WLEN = 3.0
			wall1 = [[-14.0, -0.2], [-4.0, -0.2], [-4.0 + WLEN*cos(pi/3), -0.2 - WLEN*sin(pi/3)]]
			wall2 = [[-4.0 + WLEN*cos(pi/3), 0.2 + WLEN*sin(pi/3)], [-4.0, 0.2] ,[-14.0, 0.2]]
			wall3 = [[0.4*cos(pi/6) - 4.0 + WLEN*cos(pi/3), -WLEN*sin(pi/3)], [0.4*cos(pi/6) - 4.0, 0.0], [0.4*cos(pi/6) - 4.0 + WLEN*cos(pi/3), WLEN*sin(pi/3)]]
			# caps to the corridors
			wall4 = [[-4.0 + WLEN*cos(pi/3), -0.2 - WLEN*sin(pi/3)],[0.4*cos(pi/6) - 4.0 + WLEN*cos(pi/3), -WLEN*sin(pi/3)]]
			wall5 = [[0.4*cos(pi/6) - 4.0 + WLEN*cos(pi/3), WLEN*sin(pi/3)], [-4.0 + WLEN*cos(pi/3), 0.2 + WLEN*sin(pi/3)]]
			walls = envs.WallSections(self._world, [wall1, wall2, wall3, wall4, wall5])
			"""
			
			" junction test "

			# Y - junction, test 1 				
			#WLEN = 3.0
			#WLEN2 = 5.0
			#wall1 = [[-14.0, -0.2], [-4.0, -0.2], [-4.0 + WLEN*cos(pi/3), -0.2 - WLEN*sin(pi/3)]]
			#wall2 = [[-4.0 + WLEN2*cos(pi/3), 0.2 + WLEN2*sin(pi/3)], [-4.0, 0.2] ,[-14.0, 0.2]]
			#w1 = wall1[2]
			#w2 = wall2[0]

			#wall3 = [[w1[0] + 0.4*cos(pi/6), w1[1] + 0.4*sin(pi/6)], [0.4*cos(pi/6) - 4, 0.0], [w2[0] + 0.4*cos(pi/6), w2[1] - 0.4*sin(pi/6)], w2]
			#lp = wall3[0]
			#rp = wall3[2]

			#wall6 = [lp, [lp[0] + WLEN*cos(pi/6), lp[1] + WLEN*sin(pi/6)]]
			#wall6.append([wall6[1][0] + 0.4*cos(pi/3), wall6[1][1] - 0.4*sin(pi/3)])
			#wall6.append([wall6[2][0] - WLEN*cos(pi/6), wall6[2][1] - WLEN*sin(pi/6)])
			#wall6.append([wall6[3][0] + WLEN*cos(pi/3), wall6[3][1] - WLEN*sin(pi/3)])
			#wall6.append([wall6[4][0] - 0.4*cos(pi/6), wall6[4][1] - 0.4*sin(pi/6)])
			#wall6.append(w1)
			#wall6.reverse()
			
			#walls = [wall1, wall2, wall3, wall6]
			
	
			# T - junctions, test 2
			#wall1 = [[-14.0, -0.2], [-4.0, -0.2], [-4,-4.2], [-3.6,-4.2], [-3.6,-0.2], [2.0,-0.2], [2.0,0.2]]
			#wall2 = [[-14.0, 0.2], [-1.0, 0.2], [-1.0,3.6], [-0.6,3.6], [-0.6,0.2], [2.0,0.2]]
			#wall2.reverse()
			#walls = [wall1, wall2]

			# L - junction, left, test 3
			#wall1 = [[-14.0, -0.2], [-4.0, -0.2], [-4,-4.2], [-3.6,-4.2], [-3.6,-0.2], [-3.6,0.2]]
			#wall2 = [[-14.0, 0.2], [-3.6,0.2]]
			#wall2.reverse()
			#walls = [wall1, wall2]


			# L - junction, right, test 4
			#wall1 = [[-14.0, -0.2], [-3.6,-0.2], [-3.6,0.2]]
			#wall2 = [[-14.0, 0.2], [-4.0, 0.2], [-4.0,3.6], [-3.6,3.6], [-3.6,0.2]]
			#wall2.reverse()
			#walls = [wall1, wall2]

			# 45 degree junction, right, test 5
			#WLEN2 = 5.0
			#WLEN3 = 5.5
			#wall1 = [[-14.0, -0.2], [-3.0, -0.2]]
			#wall2 = [[-4.0 + WLEN2*cos(pi/3), 0.2 + WLEN2*sin(pi/3)], [-4.0, 0.2] ,[-14.0, 0.2]]
			#w2 = wall2[0]			
			#wall3 = [[w2[0] + 0.4*cos(pi/6) - WLEN3*cos(pi/3), w2[1] - 0.4*sin(pi/6) - WLEN3*sin(pi/3)], [w2[0] + 0.4*cos(pi/6), w2[1] - 0.4*sin(pi/6)], w2]
			#walls = [wall1, wall2, wall3]
			
			# cross - junctions, test 6
			#wall1 = [[-14.0, -0.2], [-4.0, -0.2], [-4,-4.2], [-3.6,-4.2], [-3.6,-0.2], [2.0,-0.2], [2.0,0.2]]
			#wall2 = [[-14.0, 0.2], [-4.0, 0.2], [-4.0,3.6], [-3.6,3.6], [-3.6,0.2], [2.0,0.2]]
			#wall2.reverse()
			#walls = [wall1, wall2]
			

			"""
			# triple-Y - multi-junction, test 1 				
			WLEN = 5.0
			WLEN2 = 1.0
			WWID = 0.4
			wall1 = [[-11.0, -WWID/2.0], [-4.0, -WWID/2.0], [-4.0 + WLEN2*cos(-pi/3), -WWID/2.0 + WLEN2*sin(-pi/3)]]
			wall2 = [[-11.0, WWID/2.0], [-4.0, WWID/2.0], [-4.0 + WLEN2*cos(pi/3), WWID/2.0 + WLEN2*sin(pi/3)]]
			#wall2 = [[-4.0 + WLEN2*cos(pi/3), 0.2 + WLEN2*sin(pi/3)], [-4.0, 0.2] ,[-14.0, 0.2]]
			w1 = wall1[2]
			w2 = wall2[2]

			wall3 = [[w1[0] + WWID*cos(pi/6), w1[1] + WWID*sin(pi/6)], [WWID*cos(pi/6) - 4, 0.0], [w2[0] + WWID*cos(pi/6), w2[1] - 0.4*sin(pi/6)]]

			wall4 = [w1, [w1[0] + WLEN*cos(-2*pi/3), w1[1] + WLEN*sin(-2*pi/3)]]			
			wall5 = [w2, [w2[0] + WLEN*cos(2*pi/3), w2[1] + WLEN*sin(2*pi/3)]]
			
			wall4.append([wall4[-1][0] + WWID*cos(-2*pi/3 + pi/2), wall4[-1][1] + WWID*sin(-2*pi/3 + pi/2)])
			wall4.append([wall4[-1][0] + WLEN*cos(-2*pi/3 + pi), wall4[-1][1] + WLEN*sin(-2*pi/3 + pi)])
			wall4.append([wall4[-1][0] + WLEN*cos(-2*pi/3 + pi - pi/3), wall4[-1][1] + WLEN*sin(-2*pi/3 + pi - pi/3)])
			wall4.append([wall4[-1][0] + WWID*cos(-2*pi/3 + pi - pi/3 + pi/2.), wall4[-1][1] + WWID*sin(-2*pi/3 + pi - pi/3 + pi/2.)])
			wall4.append([wall4[-1][0] + WLEN*cos(-2*pi/3 + pi - pi/3 + pi), wall4[-1][1] + WLEN*sin(-2*pi/3 + pi - pi/3 + pi)])

			wall5.append([wall5[-1][0] + WWID*cos(2*pi/3 - pi/2), wall5[-1][1] + WWID*sin(2*pi/3 - pi/2)])
			wall5.append([wall5[-1][0] + WLEN*cos(2*pi/3 - pi), wall5[-1][1] + WLEN*sin(2*pi/3 - pi)])
			wall5.append([wall5[-1][0] + WLEN*cos(2*pi/3 - pi + pi/3), wall5[-1][1] + WLEN*sin(2*pi/3 - pi + pi/3)])
			wall5.append([wall5[-1][0] + WWID*cos(2*pi/3 - pi + pi/3 - pi/2.), wall5[-1][1] + WWID*sin(2*pi/3 - pi + pi/3 - pi/2.)])
			wall5.append([wall5[-1][0] + WLEN*cos(2*pi/3 - pi + pi/3 - pi), wall5[-1][1] + WLEN*sin(2*pi/3 - pi + pi/3 - pi)])
			
			wall5.reverse()
			
			wall6 = [[-11.0, WWID/2.0],[-11.0, -WWID/2.0]]
			
			walls = [wall1, wall2, wall3, wall4, wall5, wall6]
			"""

			# Y - junction, test 1 				
			WLEN2 = 7.0
			wall1 = [[-14.0, -0.2], [-4.0, -0.2], [-4.0 + WLEN2*cos(pi/3), -0.2 - WLEN2*sin(pi/3)]]
			wall2 = [[-4.0 + WLEN2*cos(pi/3), 0.2 + WLEN2*sin(pi/3)], [-4.0, 0.2] ,[-14.0, 0.2]]
			wall5 = [wall2[2],wall1[0]]
			w1 = wall1[2]
			w2 = wall2[0]

			wall3 = [[w1[0] + 0.4*cos(pi/6), w1[1] + 0.4*sin(pi/6)], [0.4*cos(pi/6) - 4, 0.0], [w2[0] + 0.4*cos(pi/6), w2[1] - 0.4*sin(pi/6)], w2]
			wall4 = [w1, [w1[0] + 0.4*cos(pi/3-pi/2), w1[1] - 0.4*sin(pi/3-pi/2)]]

			walls = [wall1, wall2, wall3, wall4, wall5]


			
			#walls = [wall1]
			
			
			#wall1 = [[-14.0, -0.2], [-4.0, -0.2], [-4.0, 0.2] ,[-14.0, 0.2]]
			#walls = [wall1]
	
			
			#walls = [wall1, wall2]
			for wall in walls:
				for i in range(len(wall)):
					p = copy(wall[i])
					p[0] += 6.0
					wall[i] = p
					
			#walls = [[[-8.0, -0.20000000000000012, 0.19393503940661008, 0.05095574838716499], [2.0, -0.20000000000000012, 0.19393503940661008, 0.05095574838716499], [2.193813906789007, -0.20685339659041574, 0.18530513169520413, 0.033317145013733861], [2.3788589896699399, -0.21666711831895774, 0.17721192660090171, -0.014631895777249528], [2.5551690005742547, -0.23452340529369159, 0.16961973100051947, -0.044282043077240284], [2.7233445973568191, -0.25661009340026569, 0.16260306198728805, -0.084397121964809599], [2.8835844341271724, -0.28423165163749259, 0.15604593151400584, -0.15211690288381571], [3.035216240681418, -0.32108443963473027, 0.15001250410106087, -0.18620066865465981], [3.1796933451575331, -0.36145915534727302, 0.14459434365665128, -0.24070129731156983], [3.3166255250012551, -0.40790377118963067, 0.13969743443397967, -0.32024476453455386], [3.4449364941730192, -0.46314567899193987, 0.13548905672684974, -0.31646963322471194], [3.5695834780721416, -0.5162532481095663, 0.13188246908299806, -0.40803685434225256], [3.6856773356134394, -0.57882482226755361, 0.12878944265100015, -0.47791817029302425], [3.7945051902880618, -0.6476958509027837, 0.12634209119984641, -0.5001835652289266], [3.8997343795660022, -0.71761824883547431, 0.12450393508801945, -0.5855921305313363], [3.9971766624488883, -0.79511812857069408, 0.12329839580632855, -0.60075742376136687], [4.0925004569451229, -0.87332214772095074, 0.12256464758413257, -0.69117923663376846], [4.1798501813441984, -0.95929957781064434, 0.12224355878843805, -0.74153456719304522], [4.262544384873717, -1.0493282197413145, 0.12235807128933589, -0.80488265804023529], [4.3394453599489893, -1.1445003671486229, 0.12293559976816494, -0.81721644833013696], [4.4155240860126383, -1.2410673860054295, 0.12387201525359592, -0.88435461477543764], [4.4854817978696779, -1.3432935798830969, 0.12503111287870877, -0.95883288161168467], [4.548220596752893, -1.4514445036072143, 0.12644487306757254, -0.94759299812597553], [4.6128941152242824, -1.5600982745201719, 0.12805942391220851, -1.0361575356656574], [4.6684037196076993, -1.6755014801685564, 0.12973081075237144, -1.0559193903908222], [4.7223166393644487, -1.7934992782063579, 0.13161721449369054, -1.0794996029899517], [4.7741756857781894, -1.9144692350391836, 0.13366095976747774, -1.0969208637140617], [4.8246919398934622, -2.0382163975768539, 0.13563051350408561, -1.1628189527670965], [4.8675724356489347, -2.1668900128876341, 0.13759114219653187, -1.1760048159156815], [4.9093478663899646, -2.2979859159408869, 0.13956795688359835, -1.203906901750659], [4.9479970823474417, -2.4320957690260876, 0.14149310110573571, -1.2348141854872283], [4.9829592205097146, -2.5692013726885206, 0.14335508025754479, -1.2526709705583485], [5.0158954443649648, -2.7087215654700811, 0.14514582302239307, -1.28320712056575], [5.0449145911143702, -2.8509368918691171, 0.14687583168030857, -1.2738575581949274], [5.0756238164544172, -2.9945664619819481, 0.14848944412507559, -1.3031535610683869], [5.1024037071605601, -3.1406210835121859, 0.14999463426739912, -1.3403685021672014], [5.1239470828961391, -3.2890605434644722, 0.15134030544851093, -1.3267867160194504], [5.1477158270029317, -3.4385226953854002, 0.15260433132014253, -1.3379792086137985], [5.1699948005964682, -3.589491994493816, 0.15372058207672029, -1.3675716430103795], [5.187927341020222, -3.7421630177692102, 0.15469129077367522, -1.3821257440166648], [5.2037352680480051, -3.896044481514231, 0.15549455676342763, -1.3710257453072618], [5.2213412204234437, -4.0505391015629852, 0.15618383612225456, -1.3781573325855399], [5.2379181005851851, -4.2058407361647063, 0.15676266596118571, -1.3617744645726562], [5.2571077844744174, -4.3614244418394641, 0.15712430135455024, -1.3929417418643846], [5.2714728757540534, -4.5178907009136919, 0.15736221814717763, -1.3974382063944879], [5.2851549652279015, -4.6746569859619429, 0.15744165653426506, -1.3851036465246784], [5.3007774904708427, -4.8313216339119096, 0.15740866913484999, -1.366768907075314], [5.3192657600033737, -4.9876407722427532, 0.15721369058046616, -1.4084578772197094], [5.3312082581909621, -5.1444002097352683, 0.15682246799588889, -1.3788555105633054], [5.3477440452196809, -5.3003484518403416, 0.15632956668045991, -1.3724026328378236], [5.3652306612808793, -5.4556969364716004, 0.15571763092170501, -1.3504733966405988], [5.3860377064344078, -5.6100181840425272, 0.15495762393636153, -1.3803849028182784], [5.4021411703677611, -5.7641367866359525, 0.15406581568480512, -1.3405039023233118], [5.4242486358411988, -5.9166082119357943, 0.15308185452221229, -1.3567683261843495], [5.4437480905098141, -6.0684430743738593, 0.15197928559824533, -1.3270534580250006], [5.4675771526016117, -6.2185426381666247, 0.15078382744060806, -1.312345215501467], [5.4934064760202972, -6.3670977076505437, 0.14951034772490354, -1.3006519150717144], [5.5207382897131936, -6.5140885782414699, 0.14816904532486999, -1.2784829740637047], [5.5510473789741646, -6.6591245224093001, 0.14679724129666696, -1.2714370279396843], [5.5820875558494141, -6.8026025258518654, 0.14537834151230142, -1.2152729051270803], [5.6207554684930461, -6.9427440782646022, 0.14391153301548951, -1.2330078420801085], [5.6565670220945901, -7.0821286612123302, 0.14247903861372377, -1.1864365915659312], [5.6984080427106463, -7.218325597441078, 0.14107701199594297, -1.1627964336765133], [5.7430134994239417, -7.3521653394652686, 0.13971127630587266, -1.1168379371239918], [5.7932298792143069, -7.4825400146432557, 0.13837775914084169, -1.0758237448004362], [5.8482198154406646, -7.6095223407310311, 0.13714409450137124, -1.0559023708909572], [5.9052156357819676, -7.7342619860737312, 0.13609270573962121, -1.0102798475843966], [5.9673610076716059, -7.8553370756183192, 0.13526654912113303, -0.98629991400205486], [6.0319968357758516, -7.9741615219095525, 0.13458879306523297, -0.91279296362801665], [6.1048179697615286, -8.0873482069206251, 0.13412144373751822, -0.88313477474650837], [6.1806990894914904, -8.1979403284246626, 0.13396329709450183, -0.8267684379750827], [6.2625933921045576, -8.3039567807702728, 0.13402901047020518, -0.75547960053227436], [6.3518748490762871, -8.4039197593604875, 0.13447138209185586, -0.72999971441834532], [6.4439770849650806, -8.5018979750310066, 0.13522532182764871, -0.63960829133796582], [6.545111514448319, -8.591662750062703, 0.13630580552811472, -0.59832211229502574], [6.6507017579472532, -8.6778600417748226, 0.13784585730075483, -0.53295507531297326], [6.7629510256708478, -8.7578699303542784, 0.13971878950208394, -0.44748064639363838], [6.8832333649153377, -8.8289578970279781, 0.14195991491215235, -0.40651676411756715], [7.0083004617379743, -8.8961206749203683, 0.14483041789952078, -0.35441517758243346], [7.139291764403092, -8.9579035898325472, 0.14813155811651921, -0.2715702606321061], [7.2780383510469928, -9.0097913842036146, 0.15193506186435826, -0.24036377182463431], [7.4219387227710545, -9.0585453178028956, 0.15635097955123525, -0.17996889965130189], [7.5727797269609667, -9.0996867842523326, 0.16121327252033299, -0.11029623025046106], [7.7308875137818784, -9.1311772111041201, 0.16665702418189851, -0.084673690744680993], [7.8951145576480961, -9.1595328414467723, 0.17264352085963283, -0.023283121209039151], [8.0667224913531186, -9.1784141121747567, 0.17910684704399088, 0.025869827213722718], [8.2455023875110758, -9.1892312923890991, 0.18606376386656526, 0.072634735192886046], [8.4315487745321249, -9.1917741452370798, 0.19355313949290939, 0.10290526276221902], [8.625075235526122, -9.1885606264956525, 0.2015234651115908, 0.15862612100100573], [8.8260718640714213, -9.1739982673459348, 0.20991661879785917, 0.18577375301455001], [9.034950809621499, -9.1531518539034895, 0.21885619990344224, 0.20956684454289581], [9.2521464315450928, -9.1262427838080971, 0.22828293945397499, 0.23966918449458083], [9.4777498420536919, -9.0913687015601692, 0.23814043083691022, 0.27002891087968661], [9.7118822705031782, -9.0478615671160796, 0.24839199667528011, 0.30611504496427844], [9.9542975016688544, -8.9937003290280906, 0.25902573388669947, 0.33012781732427549], [10.205661615886447, -8.9311670347030088, 0.27008190420737638, 0.34683677568796278], [10.466628874126819, -8.8615945896777948, 0.28155219286365524, 0.36789852312313803], [10.737091550992034, -8.7833540776061412, 0.29339755183058636, 0.38909874372061071], [11.017141326948741, -8.6958655274593966, 0.30560587159969516, 0.4085226771878227], [11.307019021537508, -8.5990880975694015, 0.31818643164730093, 0.4217793742761286], [11.607467567107221, -8.4943346883194621, 0.33109889236647383, 0.4478041563902076], [11.468470991287315, -8.1119801657510937, 0.32458305575085561, 0.4327828254498684], [11.175750475541724, -8.2176650463717014, 0.31121470776645094, 0.43278090313921408], [10.893050645152348, -8.3125482026513353, 0.2981979333391962, 0.4101198020003563], [10.620505398569358, -8.3975286372323357, 0.28548657708648623, 0.38855151081098677], [10.357727544217081, -8.4718363815088136, 0.27308211511822794, 0.36188442404193366], [10.105499169342099, -8.5388976179725038, 0.26099111580303314, 0.34616492973604579], [9.8636089842552206, -8.59918987593983, 0.24929103074953082, 0.33057877940517549], [9.6309656036129674, -8.6490722844017061, 0.23793107663904264, 0.29751939860430082], [9.4081293555744772, -8.6919696368851511, 0.22692768956202938, 0.27648140688300982], [9.194470685356432, -8.7256321865859778, 0.21629423157288236, 0.242570095074186], [8.9900303249189335, -8.7511231998507863, 0.20602342763161977, 0.21034832338545822], [8.7949679737904152, -8.7724151754065627, 0.19622096995696645, 0.19502599937693427], [8.608325189338176, -8.7795769529285934, 0.18678013825179632, 0.12465448611219426], [8.4307156397193328, -8.7860060776844051, 0.17772587251420061, 0.12248401008858874], [8.2615956068971688, -8.7813956287404942, 0.16918286479792893, 0.059047077326330966], [8.1007508836773248, -8.7724122798134694, 0.161095392688969, 0.030508627822921856], [7.948215739397817, -8.7549833177496339, 0.15352764884213022, -0.027466815534565921], [7.8035961216395879, -8.7318562768438799, 0.14645714001574964, -0.072271968303925377], [7.6659070853547355, -8.7060579450564255, 0.14008506214463873, -0.098917386540259555], [7.5366089711185538, -8.6699966540507027, 0.13423270486000077, -0.18568699182473483], [7.4139062192119223, -8.630356392479138, 0.12894694902525719, -0.22617384846355496], [7.2976613475244321, -8.5860399771329163, 0.12440584738178506, -0.27792251838044063], [7.1889046885727552, -8.5341940703630517, 0.12048240085224371, -0.35854478566943149], [7.0855264918779923, -8.4789672724819365, 0.11720516522774474, -0.40434639091472846], [6.9871274637784495, -8.4199715021389174, 0.11472955002657591, -0.45379155717088993], [6.8956057927255436, -8.3539214889254847, 0.11286638347094856, -0.53883156836123469], [6.8084806419761215, -8.2841596553665404, 0.11161319507394901, -0.58887097135691768], [6.7257595162915962, -8.2100928382428968, 0.11103458034928555, -0.64395485294765753], [6.6478666970498228, -8.1309881675640501, 0.11101729690746617, -0.70681520506710971], [6.5779294429805582, -8.0442169521399496, 0.11144713245716314, -0.80610822757259315], [6.5057180314202352, -7.9581619893874791, 0.11233852666767417, -0.78634432307586366], [6.4422181288739058, -7.8639287426736395, 0.11363160832103276, -0.8915293407863264], [6.3811960649529933, -7.7662449516294538, 0.11517732119619715, -0.92611840954657643], [6.3249436932745144, -7.6636225324363982, 0.11702858727887357, -0.98307364819132403], [6.2709229123383494, -7.5575034515448936, 0.11907772294686692, -1.013626772530781], [6.2164772344872397, -7.44891014872832, 0.12147772327994566, -1.0197497247697285], [6.1711293953643178, -7.3336981840276971, 0.1238152790381534, -1.1095145302972573], [6.1246770556469379, -7.2163198634684678, 0.12623585070226365, -1.1076583384510303], [6.0837822207857783, -7.094293380040674, 0.12869673723943109, -1.1611271846511695], [6.0454876715693473, -6.9688686435032663, 0.1311405240006607, -1.1881652034661774], [6.0106245519915511, -6.8399400344797989, 0.13355906308229959, -1.2204040276613854], [5.9806399742146805, -6.7073588219640943, 0.13592958771581573, -1.2620762498413389], [5.9476738477005799, -6.5731263886915059, 0.13822124163681815, -1.2436709297591118], [5.9191033259924719, -6.4356003848620276, 0.14046236663241574, -1.279661867688515], [5.8905054233974514, -6.2958590957278311, 0.14263754036620654, -1.2826329556348657], [5.8677563228369323, -6.1529998389840861, 0.14465921613809493, -1.3265791403104921], [5.8436851351499755, -6.0084323603617529, 0.14655776319212671, -1.3195033603033], [5.8249011684744225, -5.8612845176008763, 0.14834191933923432, -1.3575275893788636], [5.8048600343128598, -5.712674381433164, 0.1499553921346872, -1.3504462020349288], [5.7868447880552694, -5.5622905387360424, 0.15145906787668423, -1.3652676775670032], [5.770383950511274, -5.4103644203926446, 0.15281526300583315, -1.3765679622930274], [5.7512889485695489, -5.2575065488553339, 0.15404592818400412, -1.3602183965627466], [5.7362347296287393, -5.1031458615585841, 0.15509304075503522, -1.3872757997055367], [5.7230800564112538, -4.9476910815409143, 0.1560103652255232, -1.4000751380214698], [5.7043920535807437, -4.7920244050689353, 0.15678442401471088, -1.3650150008847655], [5.688043252683098, -4.6355216582754828, 0.15735435502294284, -1.3804087712471944], [5.6764336457131837, -4.4781055513770625, 0.15784363682154226, -1.410876806685984], [5.6602620081149109, -4.3208319809410787, 0.15810280775587809, -1.3820298153374726], [5.644716988237537, -4.1633403782702274, 0.1582569194532146, -1.386109475836429], [5.6258795914854858, -4.0061907384205355, 0.15827462469164796, -1.3651946490538225], [5.6086907598855475, -3.849000374480716, 0.15812737412384864, -1.3755769364001338], [5.5873224236240038, -3.6925803186746973, 0.15787285913970303, -1.3487263299044654], [5.5677759693999178, -3.536350420807064, 0.15744791157860868, -1.360027947739799], [5.5494559031456241, -3.3804386782790914, 0.15698438229859252, -1.36752814691339], [5.5247652525558504, -3.2260626761902516, 0.1563380255967167, -1.325899401338096], [5.50004776803571, -3.0724430871827932, 0.15559541178268682, -1.3249613376358467], [5.4743662129741804, -2.9197925937240798, 0.15479572159322461, -1.3178178214537766], [5.4427604091624833, -2.7691811100465094, 0.15389199410671917, -1.2776461758990521], [5.4103332121901264, -2.6197742644897133, 0.1528853446302702, -1.2707698056645114], [5.3756019738300242, -2.4719426251494783, 0.15185668410724457, -1.2537415958421469], [5.3370127963756051, -2.3261773979527076, 0.15078669064720138, -1.2256963681999258], [5.2958995794796841, -2.1822436312809343, 0.14969043320084141, -1.2062637765324016], [5.2533930933222521, -2.0398024789950364, 0.14864818609719491, -1.1944931490719402], [5.2040073011312238, -1.9007241317331709, 0.14758639214855659, -1.1432895260012499], [5.1504638447829052, -1.7643330165050781, 0.14652453047489072, -1.1104072418129043], [5.0964949964000645, -1.6291082168917852, 0.1455966449689873, -1.1047603007974018], [5.0363356045931482, -1.4974322284247847, 0.1447678084428286, -1.0559386246478379], [4.9708197532311935, -1.3691653000586967, 0.14403031518452264, -1.0122622707983149], [4.9000029379210801, -1.2444554093330333, 0.14341400969038451, -0.96804849345198507], [4.8262637549208431, -1.1219102903269893, 0.14302018494516047, -0.94280336085021987], [4.7434067167968443, -1.0056169257165639, 0.14279158035085562, -0.86543986159483599], [4.6569074406774842, -0.89213366224453639, 0.14269048972315973, -0.83321810210758518], [4.5644169328660524, -0.7831824288523408, 0.14291558799829127, -0.78062985599488788], [4.4676160709369768, -0.67728926262563371, 0.14347044825931551, -0.7439236728530646], [4.3654477725008114, -0.57518373431143988, 0.1444434149335363, -0.69878915179064627], [4.2538237649278248, -0.48162835983078678, 0.1456452098795889, -0.61126040937432469], [4.1377578372434201, -0.39118646102368565, 0.14714291226245252, -0.57564482532291805], [4.0150019328247879, -0.30652594323628873, 0.14911879607100481, -0.51745463560254223], [3.8860659617452757, -0.22692989217210874, 0.15152562814002365, -0.46676310519894415], [3.7491832601950783, -0.15568584335582986, 0.1543132802950429, -0.39359153201301061], [3.6061689236602774, -0.089706800658991892, 0.15750026834796399, -0.34594708829553633], [3.4566905370114966, -0.029309008331134645, 0.16121935799773343, -0.29769718553785735], [3.2995806695910392, 0.022377663050594354, 0.16539353808234658, -0.23152955548452706], [3.1365028794139569, 0.070688445574954184, 0.17008320715801539, -0.20170544966456247], [2.9654883429412529, 0.10910971471481828, 0.17527739616759352, -0.13469543909109374], [2.7879965916518863, 0.14463643566181833, 0.18101234675295638, -0.11124752223617317], [2.60236094453116, 0.16889525207811978, 0.18721400496717888, -0.043641652851449712], [2.40935819630654, 0.18703952303176569, 0.19385374742494779, -0.007433206462794514], [2.2087187803921946, 0.20017376471294784, 0.20106885269227903, 0.020933073468329191], [2.0, 0.20000000000000001, 0.20871885272437718, 0.087134257531319925], [-8.0, 0.20000000000000001, 0.20871885272437718, 0.087134257531319925]]]
		
			" wobbly walls, curvature test "
			#walls = [[[-8.0, -0.20000000000000129, 0.15829496853428088, 0.84475807934538483], [2.0, -0.20000000000000129, 0.15829496853428088, 0.84475807934538483], [2.1491352023878836, -0.25306588802605989, 0.15153984232658485, 1.0389829067016203], [2.2990266880820016, -0.27535638664713469, 0.16223038286434097, 1.819599366340775], [2.4298271808898519, -0.17938801578707508, 0.15096383840624542, 1.0290373057576421], [2.5789206969510499, -0.20307775987299803, 0.14567876323053131, 1.7501380557210138], [2.7020741431089608, -0.12526046901930754, 0.13976622365758457, 1.3445200902091372], [2.8401014492026047, -0.10328184194586787, 0.13939723507313898, 1.4358326374053769], [2.9751919951821204, -0.068899673122594429, 0.14365996366134806, 1.954266787449926], [3.0785612580725008, 0.030864953116767124, 0.13988332876165999, 1.4548919017936155], [3.213440714690039, 0.067944298418431859, 0.13692602878725316, 1.711764384434147], [3.3319156186123617, 0.1365914724319649, 0.13793849144120834, 1.9418785943888628], [3.4323470820014403, 0.2311459465863076, 0.13898092300153525, 1.6885437053010135], [3.5541853700828661, 0.29801244429439983, 0.13849407055161722, 1.9888055502142468], [3.6504569469441019, 0.39757343598596395, 0.14194136880222177, 1.7447962554061569], [3.7708541926763051, 0.47275225878565785, 0.15493374408444299, 2.4416972933453001], [3.8189599326710155, 0.6200285394135473, 0.14890927512833427, 1.6795497686634473], [3.9501410240855108, 0.69049479711571371, 0.1453985143878502, 1.869949195253829], [4.0628931980370986, 0.78229716775713454, 0.15972862290731449, 2.5559906934897847], [4.0948482502496084, 0.93879671284900634, 0.1442214398650824, 2.0467023927665404], [4.1889338291165537, 1.0481023740291548, 0.14661462073143006, 2.3029699818031935], [4.2532914358160454, 1.1798367487084112, 0.14665349000837216, 2.13303529124541], [4.3390233975524879, 1.2988211042702114, 0.14825684957977955, 2.2736445275740156], [4.4079797737947342, 1.4300655770028146, 0.14990506322579972, 2.329575863898401], [4.4701753105499886, 1.5664592835601803, 0.15527996594555032, 2.0196614069071757], [4.574620076903555, 1.6813642817343257, 0.156935107685024, 2.0532756106950716], [4.6762156232998926, 1.8009760410915878, 0.15469615296504483, 2.3186122102679638], [4.7419382591975037, 1.9410168739684839, 0.15593526800826429, 2.3551930211954328], [4.8029803227932, 2.0845078990564243, 0.16008719909272789, 2.5338042542350734], [4.8384789059654665, 2.2406096668430715, 0.15857818374162336, 2.4639145390823374], [4.8843552997465878, 2.3924068896517632, 0.17746788375825573, 1.8876586816356336], [5.0199704721056069, 2.5068768629708291, 0.16000923400227843, 2.3942332753479185], [5.0768127715076012, 2.6564492800960791, 0.17085379604249054, 2.7264515672074641], [5.0821009876694863, 2.8272212168771391, 0.16406015557608758, 2.1814150123179963], [5.1714593062642873, 2.9648105534754379, 0.16206331582401587, 2.4879008044408324], [5.2146097436916286, 3.1210237350117724, 0.16544111256503299, 2.1824999239069789], [5.304569643633199, 3.2598688938371998, 0.1630539520307118, 2.5244760406376274], [5.3422076318965672, 3.4185193685050059, 0.16217817663148901, 2.3409774106860004], [5.407808521103961, 3.5668375545467512, 0.16494954677525836, 2.6126462373189501], [5.4316036316570102, 3.7300617736293722, 0.16357857877427753, 2.2477083029672378], [5.5114161271278075, 3.8728480369761531, 0.1645893200142288, 2.6302380047106801], [5.5322906147038129, 4.0361082588037176, 0.16020986068805165, 2.4206966907790992], [5.5852215606145972, 4.1873217318366276, 0.17482338178471646, 1.9947933674745948], [5.7059920743664918, 4.3137246504213973, 0.17098177464150199, 2.8020233796303433], [5.6983662249185674, 4.4845362825772757, 0.15761111364541036, 2.4676837449861551], [5.7433938586802, 4.6355785791116411, 0.15965226851791614, 2.200173247773352], [5.8278246010751822, 4.7710787509991661, 0.15755726734594705, 2.2104872380457286], [5.9097638041114759, 4.9056531151971772, 0.15506991401723921, 2.5744590621699524], [5.9379757195676213, 5.0581351340046741, 0.15107649298853043, 2.3817459382264494], [5.9934039781080823, 5.1986762841667709, 0.16059340954605006, 2.7678876364252583], [5.9917210829848973, 5.3592608757489941, 0.16763721429866371, 1.8816494307951745], [6.1204714356669232, 5.466618140533777, 0.14465121162759012, 2.430276512644868], [6.1669519445929968, 5.6035981949771259, 0.1428542585695563, 2.2429408515111424], [6.2372464153189071, 5.7279606755603876, 0.16896686113514811, 2.9466839295171585], [6.2054557070094258, 5.8939099178817838, 0.14346201439344203, 2.0411263472690853], [6.2996506861664834, 6.0021164586980653, 0.13918598692270986, 2.0393809101434091], [6.3912211896713007, 6.106938125559088, 0.13032326485209694, 2.27523006759401], [6.4516534018661496, 6.222402843507675, 0.12705834457978127, 2.2310863982047202], [6.515481970207011, 6.3322651973460591, 0.1277999207292731, 2.5133630094258428], [6.5463622565168524, 6.4562782114043848, 0.12213969061854742, 2.0659074223452243], [6.6242499977560936, 6.5503611736719698, 0.11740276463677371, 2.0676251269360462], [6.6989615804384375, 6.6409237959697851, 0.12434521272756251, 2.6122013174853711], [6.7169539787702472, 6.7639603983713972, 0.11582567660715642, 2.4496540415700303], [6.7520397877239535, 6.8743441533880194, 0.11775120829763262, 1.6748827906359343], [6.8560312136140542, 6.9295811916585137, 0.11513343371564191, 2.5393127638972439], [6.8809427019688698, 7.0419872649246038, 0.10277216767099399, 1.789140193558943], [6.9656172448813916, 7.1002310648551585, 0.10376500822807315, 1.5588311726882214], [7.0622766871445659, 7.1379687006309229, 0.091663170323326687, 1.7003508190056178], [7.142107347634969, 7.1830153702013728, 0.085482104087736835, 1.9553659313035521], [7.203549957888443, 7.2424459663998491, 0.082155084929628586, 1.8278341586278517], [7.2693861860028166, 7.2915891149301046, 0.080013783229957655, 1.8585333988812356], [7.3320071322305962, 7.3413969717431424, 0.10253784276582643, 2.3630069043865563], [7.3714078655685711, 7.4360626540757551, 0.080628767817108038, 1.6359675313394673], [7.4440323889309603, 7.4710866002567773, 0.082183339215728138, 1.2560342105391045], [7.5260177680638529, 7.476787376790119, 0.081476864573314753, 1.125178294340788], [7.6073409306183519, 7.4717851080215585, 0.07783897334067133, 1.1679964625702268], [7.6851664174194907, 7.4703361860445607, 0.087553424269080388, 1.752864785656302], [7.7590542508029037, 7.5173062848218297, 0.08318335214393742, 1.0962045553820732], [7.8418978854519068, 7.5097961402130462, 0.086522095398283677, 0.97011757346009619], [7.9264002519021046, 7.4912105797849549, 0.094254199800337932, 1.3685981754980467], [8.0190979518117285, 7.5082690267092129, 0.10728041962669597, 0.51425785631405352], [8.1030296114088802, 7.4414516266359705, 0.13194302677060882, 1.6258698047665712], [8.2224469563864595, 7.4975627666341484, 0.12488410652951128, 0.3705522877293157], [8.3080046718488418, 7.4065906973571867, 0.11534234725097728, 0.88790460443053187], [8.4182393963347515, 7.3726471768137838, 0.13780208588154508, 1.2063289567397442], [8.5560146969238176, 7.375364053862425, 0.15656112974092473, 0.15188359932276799], [8.6359797887045744, 7.2407647543016544, 0.15070829386475165, 1.0454163787228334], [8.7851883034709743, 7.2195560541804848, 0.15218304346945627, 0.75991590154915956], [8.923726331025895, 7.1565727735353946, 0.16077118862014445, 0.52853109300689594], [9.0509232659495353, 7.0582451841397162, 0.17161447271571684, 0.68039324073546603], [9.2010145780653492, 6.9750338551463233, 0.19995950259128939, 0.067083509792382992], [9.2882182976850469, 6.7950913255402163, 0.20562234282265465, 0.8935933276619612], [9.4850762651058513, 6.7356986615923251, 0.20146977411271474, 0.4919581490188385], [9.6398605355468909, 6.6067339396523188, 0.2256389092973855, 0.087846188449274207], [9.7424575982461157, 6.4057693653751464, 0.23569296138441245, 0.75446001388072781], [9.9564825024588739, 6.3070550684224038, 0.23520256034857429, 0.35551120785269402], [10.115023875166019, 6.1333171119055301, 0.25274008200939213, 0.15076690785947641], [10.243870562539854, 5.9158864788132632, 0.2656251807273578, 0.59847580710674064], [10.464864403400611, 5.7685146397867673, 0.27729246173706895, 0.12527347119470961], [10.600101065133217, 5.5264358206810371, 0.28298731913627206, 0.36294078719279549], [10.792400147149959, 5.3188234755580837, 0.29587407272147648, 0.33357516177729585], [11.189231974606987, 5.657295850615256, 0.30387147160822248, 0.37779717634705201], [10.959983436997485, 5.8429241845575017, 0.29497927106538935, 0.50596897207579672], [10.774606290312104, 6.0499742957101681, 0.27791084009362488, 0.3460417943845559], [10.605806002519024, 6.2565356643759813, 0.26676044718833469, 0.30095184471824882], [10.45413366160626, 6.4647812214265006, 0.25762513664089376, 0.24530569480798251], [10.256530855188974, 6.6125517313122408, 0.24674479264186894, 0.54451010456346571], [10.083507001819168, 6.7686927597948543, 0.23306066723182628, 0.45245869367678865], [9.9443091619747896, 6.9466357070581584, 0.22591974481680896, 0.27964610179286908], [9.7698773287300114, 7.0707552132084199, 0.21408436714556983, 0.56816658547154719], [9.6327746716956106, 7.2243878622610307, 0.20591291708101966, 0.34441905815223717], [9.4881136461882605, 7.3560906000062403, 0.19563339037705663, 0.44806792835718834], [9.3258114613677474, 7.4495939209280166, 0.1873095572065466, 0.66394654754736893], [9.1646521529833684, 7.5275153855656463, 0.17900859568804292, 0.7362464739337129], [9.0482968255806071, 7.6620389650737071, 0.17786274387478002, 0.32892151393086172], [8.9073980831435922, 7.7455240973496089, 0.16377491545244882, 0.65171154378011287], [8.7374047443931726, 7.7542580636282441, 0.17021755898399807, 1.135278740116147], [8.6150721568397017, 7.843975735174709, 0.15170538080518881, 0.55382527399629389], [8.4664097863946211, 7.8536915849991917, 0.14897952249944146, 1.1213495627740482], [8.3608490181120416, 7.9769150254293244, 0.16225625433815322, 0.32416423758976748], [8.2202895466597923, 7.9723642263879082, 0.14063312122985364, 1.218976907682167], [8.0948896338884104, 8.0113195831043704, 0.13131130164603869, 0.88541423391496776], [7.9697321980127516, 8.0461148704829188, 0.12990417921962974, 0.91544747160085904], [7.8433342761824534, 7.9714689757673955, 0.14679388352686637, 1.7200632792179156], [7.720448754883555, 8.0369782877399079, 0.13925631511717501, 0.69684232073956121], [7.6099406836055117, 7.9584424488572161, 0.13557253337826708, 1.8044695092790177], [7.4777614330168838, 8.0199860012457496, 0.14580453740117705, 0.75085544506041579], [7.3821688215376291, 7.9248682312745604, 0.13485302196731178, 1.9695202006826944], [7.2840429384437888, 7.8631546827684531, 0.11591915718362246, 1.7480267082983583], [7.1547158767159686, 7.8716997475900339, 0.12960905457550567, 1.1206344964736286], [7.0538285340520197, 7.8136837337947735, 0.11637918098390702, 1.7084893113225443], [6.9627713175713399, 7.7406867933513528, 0.1167046271032541, 1.8623642889004028], [6.8615590376193225, 7.681749378401916, 0.1171219214921253, 1.7139261055042585], [6.7652883122297531, 7.6131259514799137, 0.11822532423111991, 1.8058882908829823], [6.6693549366080287, 7.5408034098284098, 0.12014059509221801, 1.8325934934672858], [6.5954050618120128, 7.4442465869223611, 0.12162156072036105, 2.1038280809789609], [6.5211022217598575, 7.3474236539560724, 0.122047500539794, 2.1028578046930608], [6.4451115137073387, 7.2503585393828285, 0.12327296612574695, 2.0931914509292415], [6.3726232028995682, 7.1483896614716294, 0.12510878173107337, 2.1394131027157384], [6.3275367994499003, 7.0256261675631269, 0.13078095890705629, 2.4054384762947656], [6.2489597468052747, 6.9236286495597117, 0.12875498779143693, 2.1009897231878951], [6.1397460869206277, 6.8362536713279081, 0.13986425678638431, 1.8613754441480761], [6.1040031725041022, 6.7025056226594391, 0.13844167166575974, 2.4962700311794759], [6.0495969258054512, 6.5778840528920473, 0.13598005490189943, 2.3457772288773469], [5.9507807704313418, 6.4734838873893299, 0.14374987693878108, 1.999481297294802], [5.9183199957302417, 6.3331816998747676, 0.14400835293678993, 2.5300454251893836], [5.8716630504342717, 6.1982349510858512, 0.14278478754072593, 2.4245305050331605], [5.7614119441156717, 6.0894853806365195, 0.15486050341319874, 1.9651538526201442], [5.7670215662975046, 5.9277081958919347, 0.16187441232296743, 2.792069317866384], [5.6623644871497589, 5.8110219444706868, 0.156744331592822, 2.0263028579227842], [5.6313726364468586, 5.661828187823426, 0.15237871187443697, 2.5525922140715811], [5.5707417787644697, 5.5229310649850483, 0.15155365926325157, 2.3458237378723812], [5.5314096960754817, 5.3742072630675963, 0.15383686809550762, 2.4988634364671478], [5.4444454157024662, 5.2419716363579134, 0.15826890734474458, 2.1756764552561365], [5.4134186974871135, 5.0874905915502016, 0.1575660193318876, 2.5592004573326803], [5.3669543963896906, 4.9376615317236041, 0.15686834749239384, 2.4566972527282678], [5.2627499904191559, 4.8075221535812709, 0.16671777339847482, 2.082232134291385], [5.2608494003453661, 4.6399238872913333, 0.1676090424351295, 2.7460685480945739], [5.1711342488108212, 4.5028958858214203, 0.16378486377472493, 2.1777211347574768], [5.1674568975594006, 4.3349150909809016, 0.1680210413831506, 2.7355202135368684], [5.1244412798481367, 4.1804735114480867, 0.16032013240910462, 2.4857691440434371], [5.0504483215162512, 4.0368148535660424, 0.16159445493943861, 2.2817846064036549], [4.9763722560938941, 3.8932613395273368, 0.16153908152926311, 2.2810292012905586], [4.9058350376451116, 3.7487371165999646, 0.1608189982534782, 2.3033540930089895], [4.8439882177689295, 3.6015321376598743, 0.15966945529295623, 2.3596605298294038], [4.8241709699603579, 3.4392601475440694, 0.1634775889437152, 2.6358863143515752], [4.7721585015475956, 3.2894522992582296, 0.15858022663126017, 2.4232348667882939], [4.6889658982808875, 3.1525643310560172, 0.16018528358379738, 2.2113153162261439], [4.6486818157216927, 3.000096783036251, 0.15769958943128434, 2.4990969190985766], [4.5929219823699849, 2.8548161149974201, 0.15561372536257587, 2.3909382078497434], [4.5391521149420182, 2.7099984072180057, 0.15447772373292265, 2.4018910700519158], [4.4857219533546697, 2.5664074682264149, 0.15320946422377646, 2.4011825959308943], [4.4158658868326235, 2.4317121178465344, 0.15173235463766888, 2.2789736800646843], [4.3686109652183163, 2.2885278254653612, 0.15078053323115637, 2.4386348006971352], [4.2597086857124911, 2.1769046397664811, 0.15594692067216784, 1.9843477118240447], [4.1879713079240091, 2.0503696595757139, 0.14545567222987635, 2.2416545120592231], [4.1655080964580424, 1.9001718320375287, 0.15186830896060954, 2.6089510596821532], [4.1031987079927621, 1.7725368538078732, 0.1420322060611674, 2.3032577941607331], [4.0334500277762082, 1.6515204468477103, 0.13967766158372971, 2.2345545450955204], [3.9073807502697004, 1.5683522369059799, 0.15103116855776702, 1.7697775949777257], [3.8231004369682235, 1.4643929597743714, 0.13383087279070488, 2.0761737907504134], [3.8229197786105242, 1.3053998391493289, 0.15899322326291618, 2.7562719508076983], [3.7069330834250458, 1.2296035380046377, 0.13855682129460728, 1.7654375659373738], [3.6714419911223768, 1.0964106300047343, 0.13784037280240966, 2.4969952043565669], [3.5324483414172736, 1.0507052512378525, 0.14631546844598803, 1.5043046117909233], [3.4877838514346777, 0.92832594303743254, 0.13027513861446813, 2.4074618968528525], [3.4112967544803414, 0.83585099812737695, 0.12000788072714148, 2.066353052453779], [3.3056115325353979, 0.77743676928478278, 0.1207542474152651, 1.691540216900451], [3.1898790011312119, 0.7385208139635745, 0.12210024735348954, 1.5109920639639185], [3.1591343269396877, 0.59643978987354473, 0.14536936540280598, 2.5443054539015977], [3.0219168848869771, 0.59885126339674177, 0.13723863015944843, 1.1690395942253959], [2.9438529075229845, 0.52093324902179328, 0.1102959723925617, 1.9710742842337705], [2.8585226926123113, 0.45279440432415213, 0.10919774600893085, 1.8604566207509297], [2.7553599177555359, 0.41987608408339816, 0.10828745967849912, 1.4954901150612716], [2.6442684992150998, 0.41219503377657818, 0.11135664240242722, 1.2556437316381615], [2.5648420256245323, 0.31466569987257076, 0.12577971091870277, 2.073956982667994], [2.4532147352057319, 0.30820409416682942, 0.11181415077949629, 1.2444329029037637], [2.3527989221686045, 0.24465065106826006, 0.11883760195153077, 1.7508738990659334], [2.2314890720909695, 0.29080146229726322, 0.12979205331203175, 0.82308267297065218], [2.1178024675927336, 0.28025716874304929, 0.11417454256048429, 1.279096078266734], [2.0, 0.20000000000000001, 0.1425434477820261, 1.7846673789603902], [-8.0, 0.20000000000000001, 0.1425434477820261, 1.7846673789603902]]]

			print "setting walls:", repr(walls)
	
			#self.walls = WallSections(self._world, walls)
			#self.walls.createWall(wall7)
	
		" make accessible to our mapping algorithms for comparison purposes "
		self.probe.setWalls(walls)

		# add coordinate system markers 

		xPnt = ogre.Vector3(5.0,0.0,0.0)
		zPnt = ogre.Vector3(0.0,0.0,5.0)

		self.xEntity = self.probe._mgr.createEntity("X_ent"+str(i), "Cube.mesh")
		self.xEntity.setCastShadows(False)
		self.xEntity.setMaterialName("Red")
		self.zEntity = self.probe._mgr.createEntity("Z_ent"+str(i), "Cube.mesh")
		self.zEntity.setCastShadows(False)
		self.zEntity.setMaterialName("Green")

		size = ogre.Vector3(0.1,0.1,0.1)
		self.probe.statNode.addEntity(self.xEntity, xPnt, scale = size)
		self.probe.statNode.addEntity(self.zEntity, zPnt, scale = size)

		self.probe.statNode.build()

	def frameStarted (self, evt, Keyboard, Mouse):
		## Set the shadow distance according to how far we are from the plane that receives them
		self.sceneManager.setShadowFarDistance((abs(self.camera.getPosition().y) + 1.0) * 3.0)

	def frameEnded(self, evt, Keyboard, Mouse):
		time = evt.timeSinceLastFrame
		sceneManager = self.sceneManager

		## Step the world and then synchronise the scene nodes with it, 
		## we could get this to do this automatically, but we 
		## can't be sure of what order the framelisteners will fire in

	## we need to register the framelistener
	def _createFrameListener(self):
		## note we pass ourselves as the demo to the framelistener
		self.frameListener = SimpleScenesFrameListener(self, self.renderWindow, self.camera, self.probe)
		self.root.addFrameListener(self.frameListener)


# set output to "test_%04d/output.txt" % i


if __name__ == '__main__':

	try:
		#prof = Profile()
		#global targetMapFile, probeDisplacement
		
		#if len(sys.argv) > 1:
		#	targetMapFile = sys.argv[1]
		#if len(sys.argv) > 2:
		#	probeDisplacement = float(sys.argv[2])

		#print "targetMapFile =", targetMapFile

		application = SnakeApp()
		#cProfile.run('application.go()', 'prof_sim')
		application.go()	
		
		#prof.runcall(application.go)
		#prof.dump_stats("profile_info2") 
	
	except ControlError as inst:
		print inst.value

	except:
		traceback.print_exc()
		print "Exception:", sys.exc_info()[0]


	
	#except ogre.OgreException, e:
	#	traceback.print_exc()
	#	print e

